
F411-one-display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003ed8  08003ed8  00013ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f44  08003f44  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003f44  08003f44  00013f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f4c  08003f4c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f4c  08003f4c  00013f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000074  08003fc8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003fc8  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a04c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b0  00000000  00000000  0002a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002b9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002c408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162fb  00000000  00000000  0002cd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aef8  00000000  00000000  00043093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c26c  00000000  00000000  0004df8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da1f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fd4  00000000  00000000  000da248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003ec0 	.word	0x08003ec0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003ec0 	.word	0x08003ec0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <_lcd_config>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void _lcd_config(){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	Lcd.columns = 20;
 8000d64:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <_lcd_config+0xc0>)
 8000d66:	2214      	movs	r2, #20
 8000d68:	659a      	str	r2, [r3, #88]	; 0x58
	Lcd.rows = 4;
 8000d6a:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <_lcd_config+0xc0>)
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	65da      	str	r2, [r3, #92]	; 0x5c
	Lcd.interface = LCD_INTERFACE_8BIT;
 8000d70:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <_lcd_config+0xc0>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	Lcd.font = LCD_FONT_5X8;
 8000d78:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <_lcd_config+0xc0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	Lcd.gpios[LCD_RS].GPIO = 	(uint32_t)LCD_RS_GPIO_Port;
 8000d80:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <_lcd_config+0xc0>)
 8000d82:	4a28      	ldr	r2, [pc, #160]	; (8000e24 <_lcd_config+0xc4>)
 8000d84:	601a      	str	r2, [r3, #0]
	Lcd.gpios[LCD_RS].pin = 	LCD_RS_Pin;
 8000d86:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <_lcd_config+0xc0>)
 8000d88:	2240      	movs	r2, #64	; 0x40
 8000d8a:	605a      	str	r2, [r3, #4]
	Lcd.gpios[LCD_E].GPIO = 	(uint32_t)LCD_E_GPIO_Port;
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <_lcd_config+0xc0>)
 8000d8e:	4a25      	ldr	r2, [pc, #148]	; (8000e24 <_lcd_config+0xc4>)
 8000d90:	611a      	str	r2, [r3, #16]
	Lcd.gpios[LCD_E].pin = 		LCD_E_Pin;
 8000d92:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <_lcd_config+0xc0>)
 8000d94:	2220      	movs	r2, #32
 8000d96:	615a      	str	r2, [r3, #20]
	Lcd.gpios[LCD_D0].GPIO = 	(uint32_t)LCD_D0_GPIO_Port;
 8000d98:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <_lcd_config+0xc0>)
 8000d9a:	4a22      	ldr	r2, [pc, #136]	; (8000e24 <_lcd_config+0xc4>)
 8000d9c:	619a      	str	r2, [r3, #24]
	Lcd.gpios[LCD_D0].pin = 	LCD_D0_Pin;
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <_lcd_config+0xc0>)
 8000da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da4:	61da      	str	r2, [r3, #28]
	Lcd.gpios[LCD_D1].GPIO =	(uint32_t)LCD_D1_GPIO_Port;
 8000da6:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <_lcd_config+0xc0>)
 8000da8:	4a1e      	ldr	r2, [pc, #120]	; (8000e24 <_lcd_config+0xc4>)
 8000daa:	621a      	str	r2, [r3, #32]
	Lcd.gpios[LCD_D1].pin = 	LCD_D1_Pin;
 8000dac:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <_lcd_config+0xc0>)
 8000dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db2:	625a      	str	r2, [r3, #36]	; 0x24
	Lcd.gpios[LCD_D2].GPIO = 	(uint32_t)LCD_D2_GPIO_Port;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <_lcd_config+0xc0>)
 8000db6:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <_lcd_config+0xc4>)
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
	Lcd.gpios[LCD_D2].pin = 	LCD_D2_Pin;
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <_lcd_config+0xc0>)
 8000dbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dc0:	62da      	str	r2, [r3, #44]	; 0x2c
	Lcd.gpios[LCD_D3].GPIO = 	(uint32_t)LCD_D3_GPIO_Port;
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <_lcd_config+0xc0>)
 8000dc4:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <_lcd_config+0xc4>)
 8000dc6:	631a      	str	r2, [r3, #48]	; 0x30
	Lcd.gpios[LCD_D3].pin = 	LCD_D3_Pin;
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <_lcd_config+0xc0>)
 8000dca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
	Lcd.gpios[LCD_D4].GPIO = 	(uint32_t)LCD_D4_GPIO_Port;
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <_lcd_config+0xc0>)
 8000dd2:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <_lcd_config+0xc4>)
 8000dd4:	639a      	str	r2, [r3, #56]	; 0x38
	Lcd.gpios[LCD_D4].pin = 	LCD_D4_Pin;
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <_lcd_config+0xc0>)
 8000dd8:	2210      	movs	r2, #16
 8000dda:	63da      	str	r2, [r3, #60]	; 0x3c
	Lcd.gpios[LCD_D5].GPIO =	(uint32_t)LCD_D5_GPIO_Port;
 8000ddc:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <_lcd_config+0xc0>)
 8000dde:	4a11      	ldr	r2, [pc, #68]	; (8000e24 <_lcd_config+0xc4>)
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
	Lcd.gpios[LCD_D5].pin = 	LCD_D5_Pin;
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <_lcd_config+0xc0>)
 8000de4:	2208      	movs	r2, #8
 8000de6:	645a      	str	r2, [r3, #68]	; 0x44
	Lcd.gpios[LCD_D6].GPIO = 	(uint32_t)LCD_D6_GPIO_Port;
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <_lcd_config+0xc0>)
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <_lcd_config+0xc4>)
 8000dec:	649a      	str	r2, [r3, #72]	; 0x48
	Lcd.gpios[LCD_D6].pin = 	LCD_D6_Pin;
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <_lcd_config+0xc0>)
 8000df0:	2204      	movs	r2, #4
 8000df2:	64da      	str	r2, [r3, #76]	; 0x4c
	Lcd.gpios[LCD_D7].GPIO = 	(uint32_t)LCD_D7_GPIO_Port;
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <_lcd_config+0xc0>)
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <_lcd_config+0xc4>)
 8000df8:	651a      	str	r2, [r3, #80]	; 0x50
	Lcd.gpios[LCD_D7].pin = 	LCD_D7_Pin;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <_lcd_config+0xc0>)
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	655a      	str	r2, [r3, #84]	; 0x54


	  //  Lcd.backlightGpio.GPIO = (uint32_t)LCD_BL_CTRL_GPIO_Port;
	  //  Lcd.backlightGpio.pin = LCD_BL_CTRL_Pin;
	Lcd.backlightPwm.Channel = TIM_CHANNEL_1;
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <_lcd_config+0xc0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	671a      	str	r2, [r3, #112]	; 0x70
	Lcd.backlightPwm.Peripheral = (uint32_t)&htim4;
 8000e06:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <_lcd_config+0xc8>)
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <_lcd_config+0xc0>)
 8000e0a:	66da      	str	r2, [r3, #108]	; 0x6c

	lcd_backlight_set_bright(&Lcd, 60);
 8000e0c:	213c      	movs	r1, #60	; 0x3c
 8000e0e:	4804      	ldr	r0, [pc, #16]	; (8000e20 <_lcd_config+0xc0>)
 8000e10:	f002 fafc 	bl	800340c <lcd_backlight_set_bright>
	lcd_init(&Lcd);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <_lcd_config+0xc0>)
 8000e16:	f002 f988 	bl	800312a <lcd_init>
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000d8 	.word	0x200000d8
 8000e24:	40020000 	.word	0x40020000
 8000e28:	20000090 	.word	0x20000090

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08c      	sub	sp, #48	; 0x30
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char texto[21];
	int Count;
	uint8_t flip = 1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t arrow1[8] = { 0x00, 0x04, 0x06, 0x1F, 0x1F, 0x06, 0x04, 0x00 };
 8000e38:	4a34      	ldr	r2, [pc, #208]	; (8000f0c <main+0xe0>)
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e42:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t arrow2[8] = { 0x00, 0x04, 0x0C, 0x1F, 0x1F, 0x0C, 0x04, 0x00 };
 8000e46:	4a32      	ldr	r2, [pc, #200]	; (8000f10 <main+0xe4>)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e4e:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e52:	f000 fab9 	bl	80013c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e56:	f000 f865 	bl	8000f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5a:	f000 f937 	bl	80010cc <MX_GPIO_Init>
  MX_TIM4_Init();
 8000e5e:	f000 f8bf 	bl	8000fe0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(150);
 8000e62:	2096      	movs	r0, #150	; 0x96
 8000e64:	f000 fb22 	bl	80014ac <HAL_Delay>

  _lcd_config();
 8000e68:	f7ff ff7a 	bl	8000d60 <_lcd_config>

  lcd_create_custom_char(&Lcd, LCD_CUSTOM_1, arrow1);
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	461a      	mov	r2, r3
 8000e72:	2100      	movs	r1, #0
 8000e74:	4827      	ldr	r0, [pc, #156]	; (8000f14 <main+0xe8>)
 8000e76:	f002 fa93 	bl	80033a0 <lcd_create_custom_char>
  lcd_create_custom_char(&Lcd, LCD_CUSTOM_2, arrow2);
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4824      	ldr	r0, [pc, #144]	; (8000f14 <main+0xe8>)
 8000e82:	f002 fa8d 	bl	80033a0 <lcd_create_custom_char>

  lcd_send_char(&Lcd, LCD_CUSTOM_1);
 8000e86:	2100      	movs	r1, #0
 8000e88:	4822      	ldr	r0, [pc, #136]	; (8000f14 <main+0xe8>)
 8000e8a:	f002 fa31 	bl	80032f0 <lcd_send_char>
  lcd_send_string(&Lcd, "Hello World");
 8000e8e:	4922      	ldr	r1, [pc, #136]	; (8000f18 <main+0xec>)
 8000e90:	4820      	ldr	r0, [pc, #128]	; (8000f14 <main+0xe8>)
 8000e92:	f002 fa55 	bl	8003340 <lcd_send_string>
  lcd_send_char(&Lcd, LCD_CUSTOM_2);
 8000e96:	2101      	movs	r1, #1
 8000e98:	481e      	ldr	r0, [pc, #120]	; (8000f14 <main+0xe8>)
 8000e9a:	f002 fa29 	bl	80032f0 <lcd_send_char>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Count = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (1)
  {
	  sprintf(texto, "Counter: %d", Count);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ea8:	491c      	ldr	r1, [pc, #112]	; (8000f1c <main+0xf0>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 fb9a 	bl	80035e4 <siprintf>
	  lcd_send_string_pos(&Lcd, texto, 1, 0);
 8000eb0:	f107 0114 	add.w	r1, r7, #20
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4816      	ldr	r0, [pc, #88]	; (8000f14 <main+0xe8>)
 8000eba:	f002 fa58 	bl	800336e <lcd_send_string_pos>
	  if (flip){
 8000ebe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00d      	beq.n	8000ee2 <main+0xb6>
		  brtLevel--;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <main+0xf4>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <main+0xf4>)
 8000ed0:	701a      	strb	r2, [r3, #0]
		  if (brtLevel == 0)
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <main+0xf4>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d110      	bne.n	8000efc <main+0xd0>
			  flip = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000ee0:	e00c      	b.n	8000efc <main+0xd0>
	  }
	  else{
		  brtLevel++;
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <main+0xf4>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <main+0xf4>)
 8000eec:	701a      	strb	r2, [r3, #0]
		  if (brtLevel == 100)
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <main+0xf4>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b64      	cmp	r3, #100	; 0x64
 8000ef4:	d102      	bne.n	8000efc <main+0xd0>
			  flip = 1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	  }

	  Count++;
 8000efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efe:	3301      	adds	r3, #1
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_Delay(100);
 8000f02:	2064      	movs	r0, #100	; 0x64
 8000f04:	f000 fad2 	bl	80014ac <HAL_Delay>
	  sprintf(texto, "Counter: %d", Count);
 8000f08:	e7cb      	b.n	8000ea2 <main+0x76>
 8000f0a:	bf00      	nop
 8000f0c:	08003ef0 	.word	0x08003ef0
 8000f10:	08003ef8 	.word	0x08003ef8
 8000f14:	200000d8 	.word	0x200000d8
 8000f18:	08003ed8 	.word	0x08003ed8
 8000f1c:	08003ee4 	.word	0x08003ee4
 8000f20:	20000000 	.word	0x20000000

08000f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b094      	sub	sp, #80	; 0x50
 8000f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	2230      	movs	r2, #48	; 0x30
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 fb4e 	bl	80035d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <SystemClock_Config+0xb4>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <SystemClock_Config+0xb4>)
 8000f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f56:	6413      	str	r3, [r2, #64]	; 0x40
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <SystemClock_Config+0xb4>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <SystemClock_Config+0xb8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <SystemClock_Config+0xb8>)
 8000f6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <SystemClock_Config+0xb8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f80:	2302      	movs	r3, #2
 8000f82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f84:	2301      	movs	r3, #1
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f88:	2310      	movs	r3, #16
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f90:	f107 0320 	add.w	r3, r7, #32
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fd31 	bl	80019fc <HAL_RCC_OscConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000fa0:	f000 f8ec 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 ff94 	bl	8001eec <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000fca:	f000 f8d7 	bl	800117c <Error_Handler>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3750      	adds	r7, #80	; 0x50
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40007000 	.word	0x40007000

08000fe0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08e      	sub	sp, #56	; 0x38
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff4:	f107 0320 	add.w	r3, r7, #32
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	615a      	str	r2, [r3, #20]
 800100e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001010:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <MX_TIM4_Init+0xe4>)
 8001012:	4a2d      	ldr	r2, [pc, #180]	; (80010c8 <MX_TIM4_Init+0xe8>)
 8001014:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <MX_TIM4_Init+0xe4>)
 8001018:	2201      	movs	r2, #1
 800101a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101c:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <MX_TIM4_Init+0xe4>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001022:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <MX_TIM4_Init+0xe4>)
 8001024:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001028:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102a:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <MX_TIM4_Init+0xe4>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <MX_TIM4_Init+0xe4>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001036:	4823      	ldr	r0, [pc, #140]	; (80010c4 <MX_TIM4_Init+0xe4>)
 8001038:	f001 f904 	bl	8002244 <HAL_TIM_Base_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001042:	f000 f89b 	bl	800117c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800104c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001050:	4619      	mov	r1, r3
 8001052:	481c      	ldr	r0, [pc, #112]	; (80010c4 <MX_TIM4_Init+0xe4>)
 8001054:	f001 fb74 	bl	8002740 <HAL_TIM_ConfigClockSource>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800105e:	f000 f88d 	bl	800117c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001062:	4818      	ldr	r0, [pc, #96]	; (80010c4 <MX_TIM4_Init+0xe4>)
 8001064:	f001 f93d 	bl	80022e2 <HAL_TIM_PWM_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800106e:	f000 f885 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	4619      	mov	r1, r3
 8001080:	4810      	ldr	r0, [pc, #64]	; (80010c4 <MX_TIM4_Init+0xe4>)
 8001082:	f001 fef1 	bl	8002e68 <HAL_TIMEx_MasterConfigSynchronization>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800108c:	f000 f876 	bl	800117c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001090:	2360      	movs	r3, #96	; 0x60
 8001092:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	4619      	mov	r1, r3
 80010a6:	4807      	ldr	r0, [pc, #28]	; (80010c4 <MX_TIM4_Init+0xe4>)
 80010a8:	f001 fa88 	bl	80025bc <HAL_TIM_PWM_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80010b2:	f000 f863 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010b6:	4803      	ldr	r0, [pc, #12]	; (80010c4 <MX_TIM4_Init+0xe4>)
 80010b8:	f000 f8b0 	bl	800121c <HAL_TIM_MspPostInit>

}
 80010bc:	bf00      	nop
 80010be:	3738      	adds	r7, #56	; 0x38
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000090 	.word	0x20000090
 80010c8:	40000800 	.word	0x40000800

080010cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <MX_GPIO_Init+0xa8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a22      	ldr	r2, [pc, #136]	; (8001174 <MX_GPIO_Init+0xa8>)
 80010ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <MX_GPIO_Init+0xa8>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <MX_GPIO_Init+0xa8>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <MX_GPIO_Init+0xa8>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <MX_GPIO_Init+0xa8>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <MX_GPIO_Init+0xa8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a14      	ldr	r2, [pc, #80]	; (8001174 <MX_GPIO_Init+0xa8>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <MX_GPIO_Init+0xa8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8001136:	2200      	movs	r2, #0
 8001138:	217e      	movs	r1, #126	; 0x7e
 800113a:	480f      	ldr	r0, [pc, #60]	; (8001178 <MX_GPIO_Init+0xac>)
 800113c:	f000 fc44 	bl	80019c8 <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001146:	480c      	ldr	r0, [pc, #48]	; (8001178 <MX_GPIO_Init+0xac>)
 8001148:	f000 fc3e 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           LCD_E_Pin LCD_RS_Pin LCD_D0_Pin LCD_D1_Pin
                           LCD_D2_Pin LCD_D3_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 800114c:	f640 737e 	movw	r3, #3966	; 0xf7e
 8001150:	60fb      	str	r3, [r7, #12]
                          |LCD_E_Pin|LCD_RS_Pin|LCD_D0_Pin|LCD_D1_Pin
                          |LCD_D2_Pin|LCD_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	2301      	movs	r3, #1
 8001154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	4619      	mov	r1, r3
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_GPIO_Init+0xac>)
 8001166:	f000 faab 	bl	80016c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800116a:	bf00      	nop
 800116c:	3720      	adds	r7, #32
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40020000 	.word	0x40020000

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	e7fe      	b.n	8001184 <Error_Handler+0x8>
	...

08001188 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_MspInit+0x4c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <HAL_MspInit+0x4c>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <HAL_MspInit+0x4c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_MspInit+0x4c>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <HAL_MspInit+0x4c>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_MspInit+0x4c>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800

080011d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <HAL_TIM_Base_MspInit+0x3c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d10d      	bne.n	8001206 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_TIM_Base_MspInit+0x40>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <HAL_TIM_Base_MspInit+0x40>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <HAL_TIM_Base_MspInit+0x40>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40000800 	.word	0x40000800
 8001218:	40023800 	.word	0x40023800

0800121c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a12      	ldr	r2, [pc, #72]	; (8001284 <HAL_TIM_MspPostInit+0x68>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d11d      	bne.n	800127a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_TIM_MspPostInit+0x6c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a10      	ldr	r2, [pc, #64]	; (8001288 <HAL_TIM_MspPostInit+0x6c>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_TIM_MspPostInit+0x6c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800125a:	2340      	movs	r3, #64	; 0x40
 800125c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800126a:	2302      	movs	r3, #2
 800126c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <HAL_TIM_MspPostInit+0x70>)
 8001276:	f000 fa23 	bl	80016c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	3720      	adds	r7, #32
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40000800 	.word	0x40000800
 8001288:	40023800 	.word	0x40023800
 800128c:	40020400 	.word	0x40020400

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <NMI_Handler+0x4>

08001296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <HardFault_Handler+0x4>

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <MemManage_Handler+0x4>

080012a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <UsageFault_Handler+0x4>

080012ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012dc:	f000 f8c6 	bl	800146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ec:	4a14      	ldr	r2, [pc, #80]	; (8001340 <_sbrk+0x5c>)
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <_sbrk+0x60>)
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <_sbrk+0x64>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <_sbrk+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	429a      	cmp	r2, r3
 8001312:	d207      	bcs.n	8001324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001314:	f002 f934 	bl	8003580 <__errno>
 8001318:	4603      	mov	r3, r0
 800131a:	220c      	movs	r2, #12
 800131c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001322:	e009      	b.n	8001338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <_sbrk+0x64>)
 8001334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20020000 	.word	0x20020000
 8001344:	00000400 	.word	0x00000400
 8001348:	20000150 	.word	0x20000150
 800134c:	20000168 	.word	0x20000168

08001350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <SystemInit+0x20>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <SystemInit+0x20>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800137a:	490e      	ldr	r1, [pc, #56]	; (80013b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800137c:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001390:	4c0b      	ldr	r4, [pc, #44]	; (80013c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800139e:	f7ff ffd7 	bl	8001350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a2:	f002 f8f3 	bl	800358c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a6:	f7ff fd41 	bl	8000e2c <main>
  bx  lr    
 80013aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013b8:	08003f54 	.word	0x08003f54
  ldr r2, =_sbss
 80013bc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013c0:	20000168 	.word	0x20000168

080013c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC_IRQHandler>
	...

080013c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <HAL_Init+0x40>)
 80013d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_Init+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <HAL_Init+0x40>)
 80013de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_Init+0x40>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a07      	ldr	r2, [pc, #28]	; (8001408 <HAL_Init+0x40>)
 80013ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f0:	2003      	movs	r0, #3
 80013f2:	f000 f931 	bl	8001658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f6:	200f      	movs	r0, #15
 80013f8:	f000 f808 	bl	800140c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013fc:	f7ff fec4 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023c00 	.word	0x40023c00

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_InitTick+0x54>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_InitTick+0x58>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	fbb3 f3f1 	udiv	r3, r3, r1
 8001426:	fbb2 f3f3 	udiv	r3, r2, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f93b 	bl	80016a6 <HAL_SYSTICK_Config>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e00e      	b.n	8001458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d80a      	bhi.n	8001456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001440:	2200      	movs	r2, #0
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001448:	f000 f911 	bl	800166e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <HAL_InitTick+0x5c>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e000      	b.n	8001458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000004 	.word	0x20000004
 8001464:	2000000c 	.word	0x2000000c
 8001468:	20000008 	.word	0x20000008

0800146c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x20>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_IncTick+0x24>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <HAL_IncTick+0x24>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	2000000c 	.word	0x2000000c
 8001490:	20000154 	.word	0x20000154

08001494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000154 	.word	0x20000154

080014ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff ffee 	bl	8001494 <HAL_GetTick>
 80014b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014c4:	d005      	beq.n	80014d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_Delay+0x44>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014d2:	bf00      	nop
 80014d4:	f7ff ffde 	bl	8001494 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d8f7      	bhi.n	80014d4 <HAL_Delay+0x28>
  {
  }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000000c 	.word	0x2000000c

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	db0a      	blt.n	8001582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	490c      	ldr	r1, [pc, #48]	; (80015a4 <__NVIC_SetPriority+0x4c>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	440b      	add	r3, r1
 800157c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001580:	e00a      	b.n	8001598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <__NVIC_SetPriority+0x50>)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	3b04      	subs	r3, #4
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	440b      	add	r3, r1
 8001596:	761a      	strb	r2, [r3, #24]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000e100 	.word	0xe000e100
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f1c3 0307 	rsb	r3, r3, #7
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	bf28      	it	cs
 80015ca:	2304      	movcs	r3, #4
 80015cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3304      	adds	r3, #4
 80015d2:	2b06      	cmp	r3, #6
 80015d4:	d902      	bls.n	80015dc <NVIC_EncodePriority+0x30>
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3b03      	subs	r3, #3
 80015da:	e000      	b.n	80015de <NVIC_EncodePriority+0x32>
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43d9      	mvns	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	4313      	orrs	r3, r2
         );
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001624:	d301      	bcc.n	800162a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001626:	2301      	movs	r3, #1
 8001628:	e00f      	b.n	800164a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <SysTick_Config+0x40>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001632:	210f      	movs	r1, #15
 8001634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001638:	f7ff ff8e 	bl	8001558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <SysTick_Config+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <SysTick_Config+0x40>)
 8001644:	2207      	movs	r2, #7
 8001646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	e000e010 	.word	0xe000e010

08001658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff47 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001680:	f7ff ff5c 	bl	800153c <__NVIC_GetPriorityGrouping>
 8001684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	6978      	ldr	r0, [r7, #20]
 800168c:	f7ff ff8e 	bl	80015ac <NVIC_EncodePriority>
 8001690:	4602      	mov	r2, r0
 8001692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff5d 	bl	8001558 <__NVIC_SetPriority>
}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ffb0 	bl	8001614 <SysTick_Config>
 80016b4:	4603      	mov	r3, r0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	e159      	b.n	8001990 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	f040 8148 	bne.w	800198a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	2b01      	cmp	r3, #1
 8001704:	d005      	beq.n	8001712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800170e:	2b02      	cmp	r3, #2
 8001710:	d130      	bne.n	8001774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	2203      	movs	r2, #3
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001748:	2201      	movs	r2, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	f003 0201 	and.w	r2, r3, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b03      	cmp	r3, #3
 800177e:	d017      	beq.n	80017b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d123      	bne.n	8001804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	08da      	lsrs	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3208      	adds	r2, #8
 80017c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	220f      	movs	r2, #15
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	08da      	lsrs	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3208      	adds	r2, #8
 80017fe:	69b9      	ldr	r1, [r7, #24]
 8001800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0203 	and.w	r2, r3, #3
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80a2 	beq.w	800198a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b57      	ldr	r3, [pc, #348]	; (80019a8 <HAL_GPIO_Init+0x2e8>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a56      	ldr	r2, [pc, #344]	; (80019a8 <HAL_GPIO_Init+0x2e8>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b54      	ldr	r3, [pc, #336]	; (80019a8 <HAL_GPIO_Init+0x2e8>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001862:	4a52      	ldr	r2, [pc, #328]	; (80019ac <HAL_GPIO_Init+0x2ec>)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a49      	ldr	r2, [pc, #292]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d019      	beq.n	80018c2 <HAL_GPIO_Init+0x202>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a48      	ldr	r2, [pc, #288]	; (80019b4 <HAL_GPIO_Init+0x2f4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0x1fe>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a47      	ldr	r2, [pc, #284]	; (80019b8 <HAL_GPIO_Init+0x2f8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00d      	beq.n	80018ba <HAL_GPIO_Init+0x1fa>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a46      	ldr	r2, [pc, #280]	; (80019bc <HAL_GPIO_Init+0x2fc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d007      	beq.n	80018b6 <HAL_GPIO_Init+0x1f6>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a45      	ldr	r2, [pc, #276]	; (80019c0 <HAL_GPIO_Init+0x300>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d101      	bne.n	80018b2 <HAL_GPIO_Init+0x1f2>
 80018ae:	2304      	movs	r3, #4
 80018b0:	e008      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018b2:	2307      	movs	r3, #7
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018b6:	2303      	movs	r3, #3
 80018b8:	e004      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018c2:	2300      	movs	r3, #0
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	f002 0203 	and.w	r2, r2, #3
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	4093      	lsls	r3, r2
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d4:	4935      	ldr	r1, [pc, #212]	; (80019ac <HAL_GPIO_Init+0x2ec>)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3302      	adds	r3, #2
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e2:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <HAL_GPIO_Init+0x304>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001906:	4a2f      	ldr	r2, [pc, #188]	; (80019c4 <HAL_GPIO_Init+0x304>)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800190c:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <HAL_GPIO_Init+0x304>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001930:	4a24      	ldr	r2, [pc, #144]	; (80019c4 <HAL_GPIO_Init+0x304>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001936:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <HAL_GPIO_Init+0x304>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800195a:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <HAL_GPIO_Init+0x304>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_GPIO_Init+0x304>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001984:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_GPIO_Init+0x304>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3301      	adds	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b0f      	cmp	r3, #15
 8001994:	f67f aea2 	bls.w	80016dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40013800 	.word	0x40013800
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020c00 	.word	0x40020c00
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40013c00 	.word	0x40013c00

080019c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
 80019d4:	4613      	mov	r3, r2
 80019d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d8:	787b      	ldrb	r3, [r7, #1]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019e4:	e003      	b.n	80019ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	041a      	lsls	r2, r3, #16
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	619a      	str	r2, [r3, #24]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e267      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d075      	beq.n	8001b06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a1a:	4b88      	ldr	r3, [pc, #544]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d00c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a26:	4b85      	ldr	r3, [pc, #532]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d112      	bne.n	8001a58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a32:	4b82      	ldr	r3, [pc, #520]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a3e:	d10b      	bne.n	8001a58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	4b7e      	ldr	r3, [pc, #504]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d05b      	beq.n	8001b04 <HAL_RCC_OscConfig+0x108>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d157      	bne.n	8001b04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e242      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a60:	d106      	bne.n	8001a70 <HAL_RCC_OscConfig+0x74>
 8001a62:	4b76      	ldr	r3, [pc, #472]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a75      	ldr	r2, [pc, #468]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	e01d      	b.n	8001aac <HAL_RCC_OscConfig+0xb0>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x98>
 8001a7a:	4b70      	ldr	r3, [pc, #448]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a6f      	ldr	r2, [pc, #444]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b6d      	ldr	r3, [pc, #436]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a6c      	ldr	r2, [pc, #432]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e00b      	b.n	8001aac <HAL_RCC_OscConfig+0xb0>
 8001a94:	4b69      	ldr	r3, [pc, #420]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a68      	ldr	r2, [pc, #416]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b66      	ldr	r3, [pc, #408]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a65      	ldr	r2, [pc, #404]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d013      	beq.n	8001adc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fcee 	bl	8001494 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001abc:	f7ff fcea 	bl	8001494 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	; 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e207      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	4b5b      	ldr	r3, [pc, #364]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0xc0>
 8001ada:	e014      	b.n	8001b06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fcda 	bl	8001494 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fcd6 	bl	8001494 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	; 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e1f3      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af6:	4b51      	ldr	r3, [pc, #324]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0xe8>
 8001b02:	e000      	b.n	8001b06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d063      	beq.n	8001bda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b12:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b1e:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d11c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2a:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d116      	bne.n	8001b64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <HAL_RCC_OscConfig+0x152>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e1c7      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4937      	ldr	r1, [pc, #220]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b62:	e03a      	b.n	8001bda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d020      	beq.n	8001bae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b6c:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <HAL_RCC_OscConfig+0x244>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7ff fc8f 	bl	8001494 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fc8b 	bl	8001494 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1a8      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b98:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4925      	ldr	r1, [pc, #148]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
 8001bac:	e015      	b.n	8001bda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bae:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <HAL_RCC_OscConfig+0x244>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fc6e 	bl	8001494 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bbc:	f7ff fc6a 	bl	8001494 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e187      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d036      	beq.n	8001c54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d016      	beq.n	8001c1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_RCC_OscConfig+0x248>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fc4e 	bl	8001494 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fc4a 	bl	8001494 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e167      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x200>
 8001c1a:	e01b      	b.n	8001c54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_RCC_OscConfig+0x248>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c22:	f7ff fc37 	bl	8001494 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c28:	e00e      	b.n	8001c48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c2a:	f7ff fc33 	bl	8001494 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d907      	bls.n	8001c48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e150      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	42470000 	.word	0x42470000
 8001c44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c48:	4b88      	ldr	r3, [pc, #544]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ea      	bne.n	8001c2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 8097 	beq.w	8001d90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c66:	4b81      	ldr	r3, [pc, #516]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10f      	bne.n	8001c92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	4b7d      	ldr	r3, [pc, #500]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a7c      	ldr	r2, [pc, #496]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b7a      	ldr	r3, [pc, #488]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	4b77      	ldr	r3, [pc, #476]	; (8001e70 <HAL_RCC_OscConfig+0x474>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d118      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9e:	4b74      	ldr	r3, [pc, #464]	; (8001e70 <HAL_RCC_OscConfig+0x474>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a73      	ldr	r2, [pc, #460]	; (8001e70 <HAL_RCC_OscConfig+0x474>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001caa:	f7ff fbf3 	bl	8001494 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb2:	f7ff fbef 	bl	8001494 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e10c      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	4b6a      	ldr	r3, [pc, #424]	; (8001e70 <HAL_RCC_OscConfig+0x474>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x2ea>
 8001cd8:	4b64      	ldr	r3, [pc, #400]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cdc:	4a63      	ldr	r2, [pc, #396]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce4:	e01c      	b.n	8001d20 <HAL_RCC_OscConfig+0x324>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b05      	cmp	r3, #5
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x30c>
 8001cee:	4b5f      	ldr	r3, [pc, #380]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	4a5e      	ldr	r2, [pc, #376]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfa:	4b5c      	ldr	r3, [pc, #368]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	4a5b      	ldr	r2, [pc, #364]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0x324>
 8001d08:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0c:	4a57      	ldr	r2, [pc, #348]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d0e:	f023 0301 	bic.w	r3, r3, #1
 8001d12:	6713      	str	r3, [r2, #112]	; 0x70
 8001d14:	4b55      	ldr	r3, [pc, #340]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	4a54      	ldr	r2, [pc, #336]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d1a:	f023 0304 	bic.w	r3, r3, #4
 8001d1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d015      	beq.n	8001d54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d28:	f7ff fbb4 	bl	8001494 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d30:	f7ff fbb0 	bl	8001494 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e0cb      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d46:	4b49      	ldr	r3, [pc, #292]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0ee      	beq.n	8001d30 <HAL_RCC_OscConfig+0x334>
 8001d52:	e014      	b.n	8001d7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d54:	f7ff fb9e 	bl	8001494 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fb9a 	bl	8001494 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e0b5      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d72:	4b3e      	ldr	r3, [pc, #248]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1ee      	bne.n	8001d5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d105      	bne.n	8001d90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d84:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	4a38      	ldr	r2, [pc, #224]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80a1 	beq.w	8001edc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d9a:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d05c      	beq.n	8001e60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d141      	bne.n	8001e32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dae:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <HAL_RCC_OscConfig+0x478>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7ff fb6e 	bl	8001494 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7ff fb6a 	bl	8001494 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e087      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dce:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69da      	ldr	r2, [r3, #28]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	019b      	lsls	r3, r3, #6
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	085b      	lsrs	r3, r3, #1
 8001df2:	3b01      	subs	r3, #1
 8001df4:	041b      	lsls	r3, r3, #16
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	061b      	lsls	r3, r3, #24
 8001dfe:	491b      	ldr	r1, [pc, #108]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCC_OscConfig+0x478>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff fb43 	bl	8001494 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e12:	f7ff fb3f 	bl	8001494 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e05c      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x416>
 8001e30:	e054      	b.n	8001edc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_RCC_OscConfig+0x478>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fb2c 	bl	8001494 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e40:	f7ff fb28 	bl	8001494 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e045      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x444>
 8001e5e:	e03d      	b.n	8001edc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d107      	bne.n	8001e78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e038      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40007000 	.word	0x40007000
 8001e74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <HAL_RCC_OscConfig+0x4ec>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d028      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d121      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d11a      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d111      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	085b      	lsrs	r3, r3, #1
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800

08001eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0cc      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f00:	4b68      	ldr	r3, [pc, #416]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d90c      	bls.n	8001f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b65      	ldr	r3, [pc, #404]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0b8      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f40:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a58      	ldr	r2, [pc, #352]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f58:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4a52      	ldr	r2, [pc, #328]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	494d      	ldr	r1, [pc, #308]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d044      	beq.n	800200c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d119      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e07f      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d003      	beq.n	8001faa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001faa:	4b3f      	ldr	r3, [pc, #252]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e06f      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fba:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e067      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fca:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f023 0203 	bic.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4934      	ldr	r1, [pc, #208]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fdc:	f7ff fa5a 	bl	8001494 <HAL_GetTick>
 8001fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7ff fa56 	bl	8001494 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e04f      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 020c 	and.w	r2, r3, #12
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	429a      	cmp	r2, r3
 800200a:	d1eb      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800200c:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d20c      	bcs.n	8002034 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e032      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4916      	ldr	r1, [pc, #88]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800205e:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	490e      	ldr	r1, [pc, #56]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002072:	f000 f821 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002076:	4602      	mov	r2, r0
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	490a      	ldr	r1, [pc, #40]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	5ccb      	ldrb	r3, [r1, r3]
 8002086:	fa22 f303 	lsr.w	r3, r2, r3
 800208a:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff f9ba 	bl	800140c <HAL_InitTick>

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023c00 	.word	0x40023c00
 80020a8:	40023800 	.word	0x40023800
 80020ac:	08003f00 	.word	0x08003f00
 80020b0:	20000004 	.word	0x20000004
 80020b4:	20000008 	.word	0x20000008

080020b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020bc:	b090      	sub	sp, #64	; 0x40
 80020be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34
 80020c4:	2300      	movs	r3, #0
 80020c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c8:	2300      	movs	r3, #0
 80020ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020d0:	4b59      	ldr	r3, [pc, #356]	; (8002238 <HAL_RCC_GetSysClockFreq+0x180>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d00d      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0x40>
 80020dc:	2b08      	cmp	r3, #8
 80020de:	f200 80a1 	bhi.w	8002224 <HAL_RCC_GetSysClockFreq+0x16c>
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0x34>
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d003      	beq.n	80020f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80020ea:	e09b      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020ec:	4b53      	ldr	r3, [pc, #332]	; (800223c <HAL_RCC_GetSysClockFreq+0x184>)
 80020ee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80020f0:	e09b      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020f2:	4b53      	ldr	r3, [pc, #332]	; (8002240 <HAL_RCC_GetSysClockFreq+0x188>)
 80020f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020f6:	e098      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f8:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <HAL_RCC_GetSysClockFreq+0x180>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002100:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002102:	4b4d      	ldr	r3, [pc, #308]	; (8002238 <HAL_RCC_GetSysClockFreq+0x180>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d028      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210e:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <HAL_RCC_GetSysClockFreq+0x180>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	099b      	lsrs	r3, r3, #6
 8002114:	2200      	movs	r2, #0
 8002116:	623b      	str	r3, [r7, #32]
 8002118:	627a      	str	r2, [r7, #36]	; 0x24
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002120:	2100      	movs	r1, #0
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_RCC_GetSysClockFreq+0x188>)
 8002124:	fb03 f201 	mul.w	r2, r3, r1
 8002128:	2300      	movs	r3, #0
 800212a:	fb00 f303 	mul.w	r3, r0, r3
 800212e:	4413      	add	r3, r2
 8002130:	4a43      	ldr	r2, [pc, #268]	; (8002240 <HAL_RCC_GetSysClockFreq+0x188>)
 8002132:	fba0 1202 	umull	r1, r2, r0, r2
 8002136:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002138:	460a      	mov	r2, r1
 800213a:	62ba      	str	r2, [r7, #40]	; 0x28
 800213c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800213e:	4413      	add	r3, r2
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002144:	2200      	movs	r2, #0
 8002146:	61bb      	str	r3, [r7, #24]
 8002148:	61fa      	str	r2, [r7, #28]
 800214a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800214e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002152:	f7fe fc83 	bl	8000a5c <__aeabi_uldivmod>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4613      	mov	r3, r2
 800215c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215e:	e053      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002160:	4b35      	ldr	r3, [pc, #212]	; (8002238 <HAL_RCC_GetSysClockFreq+0x180>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	099b      	lsrs	r3, r3, #6
 8002166:	2200      	movs	r2, #0
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	617a      	str	r2, [r7, #20]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002172:	f04f 0b00 	mov.w	fp, #0
 8002176:	4652      	mov	r2, sl
 8002178:	465b      	mov	r3, fp
 800217a:	f04f 0000 	mov.w	r0, #0
 800217e:	f04f 0100 	mov.w	r1, #0
 8002182:	0159      	lsls	r1, r3, #5
 8002184:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002188:	0150      	lsls	r0, r2, #5
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	ebb2 080a 	subs.w	r8, r2, sl
 8002192:	eb63 090b 	sbc.w	r9, r3, fp
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021aa:	ebb2 0408 	subs.w	r4, r2, r8
 80021ae:	eb63 0509 	sbc.w	r5, r3, r9
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	00eb      	lsls	r3, r5, #3
 80021bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021c0:	00e2      	lsls	r2, r4, #3
 80021c2:	4614      	mov	r4, r2
 80021c4:	461d      	mov	r5, r3
 80021c6:	eb14 030a 	adds.w	r3, r4, sl
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	eb45 030b 	adc.w	r3, r5, fp
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021de:	4629      	mov	r1, r5
 80021e0:	028b      	lsls	r3, r1, #10
 80021e2:	4621      	mov	r1, r4
 80021e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021e8:	4621      	mov	r1, r4
 80021ea:	028a      	lsls	r2, r1, #10
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f2:	2200      	movs	r2, #0
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	60fa      	str	r2, [r7, #12]
 80021f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021fc:	f7fe fc2e 	bl	8000a5c <__aeabi_uldivmod>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4613      	mov	r3, r2
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_RCC_GetSysClockFreq+0x180>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	0c1b      	lsrs	r3, r3, #16
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	3301      	adds	r3, #1
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800221a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002222:	e002      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_RCC_GetSysClockFreq+0x184>)
 8002226:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800222a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800222c:	4618      	mov	r0, r3
 800222e:	3740      	adds	r7, #64	; 0x40
 8002230:	46bd      	mov	sp, r7
 8002232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	00f42400 	.word	0x00f42400
 8002240:	017d7840 	.word	0x017d7840

08002244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e041      	b.n	80022da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7fe ffb4 	bl	80011d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3304      	adds	r3, #4
 8002280:	4619      	mov	r1, r3
 8002282:	4610      	mov	r0, r2
 8002284:	f000 fb24 	bl	80028d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e041      	b.n	8002378 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d106      	bne.n	800230e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f839 	bl	8002380 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2202      	movs	r2, #2
 8002312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3304      	adds	r3, #4
 800231e:	4619      	mov	r1, r3
 8002320:	4610      	mov	r0, r2
 8002322:	f000 fad5 	bl	80028d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d109      	bne.n	80023b8 <HAL_TIM_PWM_Start+0x24>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	bf14      	ite	ne
 80023b0:	2301      	movne	r3, #1
 80023b2:	2300      	moveq	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	e022      	b.n	80023fe <HAL_TIM_PWM_Start+0x6a>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d109      	bne.n	80023d2 <HAL_TIM_PWM_Start+0x3e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	bf14      	ite	ne
 80023ca:	2301      	movne	r3, #1
 80023cc:	2300      	moveq	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	e015      	b.n	80023fe <HAL_TIM_PWM_Start+0x6a>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d109      	bne.n	80023ec <HAL_TIM_PWM_Start+0x58>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	bf14      	ite	ne
 80023e4:	2301      	movne	r3, #1
 80023e6:	2300      	moveq	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	e008      	b.n	80023fe <HAL_TIM_PWM_Start+0x6a>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	bf14      	ite	ne
 80023f8:	2301      	movne	r3, #1
 80023fa:	2300      	moveq	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e068      	b.n	80024d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d104      	bne.n	8002416 <HAL_TIM_PWM_Start+0x82>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002414:	e013      	b.n	800243e <HAL_TIM_PWM_Start+0xaa>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b04      	cmp	r3, #4
 800241a:	d104      	bne.n	8002426 <HAL_TIM_PWM_Start+0x92>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002424:	e00b      	b.n	800243e <HAL_TIM_PWM_Start+0xaa>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b08      	cmp	r3, #8
 800242a:	d104      	bne.n	8002436 <HAL_TIM_PWM_Start+0xa2>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002434:	e003      	b.n	800243e <HAL_TIM_PWM_Start+0xaa>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2202      	movs	r2, #2
 800243a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2201      	movs	r2, #1
 8002444:	6839      	ldr	r1, [r7, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f000 fce8 	bl	8002e1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a23      	ldr	r2, [pc, #140]	; (80024e0 <HAL_TIM_PWM_Start+0x14c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d107      	bne.n	8002466 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002464:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <HAL_TIM_PWM_Start+0x14c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d018      	beq.n	80024a2 <HAL_TIM_PWM_Start+0x10e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002478:	d013      	beq.n	80024a2 <HAL_TIM_PWM_Start+0x10e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <HAL_TIM_PWM_Start+0x150>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00e      	beq.n	80024a2 <HAL_TIM_PWM_Start+0x10e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a17      	ldr	r2, [pc, #92]	; (80024e8 <HAL_TIM_PWM_Start+0x154>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d009      	beq.n	80024a2 <HAL_TIM_PWM_Start+0x10e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a16      	ldr	r2, [pc, #88]	; (80024ec <HAL_TIM_PWM_Start+0x158>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d004      	beq.n	80024a2 <HAL_TIM_PWM_Start+0x10e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <HAL_TIM_PWM_Start+0x15c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d111      	bne.n	80024c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b06      	cmp	r3, #6
 80024b2:	d010      	beq.n	80024d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0201 	orr.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c4:	e007      	b.n	80024d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0201 	orr.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40010000 	.word	0x40010000
 80024e4:	40000400 	.word	0x40000400
 80024e8:	40000800 	.word	0x40000800
 80024ec:	40000c00 	.word	0x40000c00
 80024f0:	40014000 	.word	0x40014000

080024f4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2200      	movs	r2, #0
 8002504:	6839      	ldr	r1, [r7, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fc88 	bl	8002e1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a29      	ldr	r2, [pc, #164]	; (80025b8 <HAL_TIM_PWM_Stop+0xc4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d117      	bne.n	8002546 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6a1a      	ldr	r2, [r3, #32]
 800251c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002520:	4013      	ands	r3, r2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10f      	bne.n	8002546 <HAL_TIM_PWM_Stop+0x52>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6a1a      	ldr	r2, [r3, #32]
 800252c:	f240 4344 	movw	r3, #1092	; 0x444
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d107      	bne.n	8002546 <HAL_TIM_PWM_Stop+0x52>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002544:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6a1a      	ldr	r2, [r3, #32]
 800254c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10f      	bne.n	8002576 <HAL_TIM_PWM_Stop+0x82>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6a1a      	ldr	r2, [r3, #32]
 800255c:	f240 4344 	movw	r3, #1092	; 0x444
 8002560:	4013      	ands	r3, r2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d107      	bne.n	8002576 <HAL_TIM_PWM_Stop+0x82>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d104      	bne.n	8002586 <HAL_TIM_PWM_Stop+0x92>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002584:	e013      	b.n	80025ae <HAL_TIM_PWM_Stop+0xba>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b04      	cmp	r3, #4
 800258a:	d104      	bne.n	8002596 <HAL_TIM_PWM_Stop+0xa2>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002594:	e00b      	b.n	80025ae <HAL_TIM_PWM_Stop+0xba>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b08      	cmp	r3, #8
 800259a:	d104      	bne.n	80025a6 <HAL_TIM_PWM_Stop+0xb2>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025a4:	e003      	b.n	80025ae <HAL_TIM_PWM_Stop+0xba>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40010000 	.word	0x40010000

080025bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e0ae      	b.n	8002738 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b0c      	cmp	r3, #12
 80025e6:	f200 809f 	bhi.w	8002728 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025ea:	a201      	add	r2, pc, #4	; (adr r2, 80025f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	08002625 	.word	0x08002625
 80025f4:	08002729 	.word	0x08002729
 80025f8:	08002729 	.word	0x08002729
 80025fc:	08002729 	.word	0x08002729
 8002600:	08002665 	.word	0x08002665
 8002604:	08002729 	.word	0x08002729
 8002608:	08002729 	.word	0x08002729
 800260c:	08002729 	.word	0x08002729
 8002610:	080026a7 	.word	0x080026a7
 8002614:	08002729 	.word	0x08002729
 8002618:	08002729 	.word	0x08002729
 800261c:	08002729 	.word	0x08002729
 8002620:	080026e7 	.word	0x080026e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f9d0 	bl	80029d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0208 	orr.w	r2, r2, #8
 800263e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0204 	bic.w	r2, r2, #4
 800264e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6999      	ldr	r1, [r3, #24]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	619a      	str	r2, [r3, #24]
      break;
 8002662:	e064      	b.n	800272e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fa16 	bl	8002a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800267e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800268e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6999      	ldr	r1, [r3, #24]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	021a      	lsls	r2, r3, #8
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	619a      	str	r2, [r3, #24]
      break;
 80026a4:	e043      	b.n	800272e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fa61 	bl	8002b74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0208 	orr.w	r2, r2, #8
 80026c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0204 	bic.w	r2, r2, #4
 80026d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69d9      	ldr	r1, [r3, #28]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	61da      	str	r2, [r3, #28]
      break;
 80026e4:	e023      	b.n	800272e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68b9      	ldr	r1, [r7, #8]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 faab 	bl	8002c48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69da      	ldr	r2, [r3, #28]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69d9      	ldr	r1, [r3, #28]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	021a      	lsls	r2, r3, #8
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	61da      	str	r2, [r3, #28]
      break;
 8002726:	e002      	b.n	800272e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	75fb      	strb	r3, [r7, #23]
      break;
 800272c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002736:	7dfb      	ldrb	r3, [r7, #23]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_TIM_ConfigClockSource+0x1c>
 8002758:	2302      	movs	r3, #2
 800275a:	e0b4      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x186>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800277a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002794:	d03e      	beq.n	8002814 <HAL_TIM_ConfigClockSource+0xd4>
 8002796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279a:	f200 8087 	bhi.w	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 800279e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a2:	f000 8086 	beq.w	80028b2 <HAL_TIM_ConfigClockSource+0x172>
 80027a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027aa:	d87f      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027ac:	2b70      	cmp	r3, #112	; 0x70
 80027ae:	d01a      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0xa6>
 80027b0:	2b70      	cmp	r3, #112	; 0x70
 80027b2:	d87b      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027b4:	2b60      	cmp	r3, #96	; 0x60
 80027b6:	d050      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x11a>
 80027b8:	2b60      	cmp	r3, #96	; 0x60
 80027ba:	d877      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027bc:	2b50      	cmp	r3, #80	; 0x50
 80027be:	d03c      	beq.n	800283a <HAL_TIM_ConfigClockSource+0xfa>
 80027c0:	2b50      	cmp	r3, #80	; 0x50
 80027c2:	d873      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	d058      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x13a>
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d86f      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027cc:	2b30      	cmp	r3, #48	; 0x30
 80027ce:	d064      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027d0:	2b30      	cmp	r3, #48	; 0x30
 80027d2:	d86b      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d060      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d867      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d05c      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d05a      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x15a>
 80027e4:	e062      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6899      	ldr	r1, [r3, #8]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f000 faf1 	bl	8002ddc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002808:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	609a      	str	r2, [r3, #8]
      break;
 8002812:	e04f      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6899      	ldr	r1, [r3, #8]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f000 fada 	bl	8002ddc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002836:	609a      	str	r2, [r3, #8]
      break;
 8002838:	e03c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	461a      	mov	r2, r3
 8002848:	f000 fa4e 	bl	8002ce8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2150      	movs	r1, #80	; 0x50
 8002852:	4618      	mov	r0, r3
 8002854:	f000 faa7 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 8002858:	e02c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	461a      	mov	r2, r3
 8002868:	f000 fa6d 	bl	8002d46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2160      	movs	r1, #96	; 0x60
 8002872:	4618      	mov	r0, r3
 8002874:	f000 fa97 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 8002878:	e01c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	461a      	mov	r2, r3
 8002888:	f000 fa2e 	bl	8002ce8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2140      	movs	r1, #64	; 0x40
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fa87 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 8002898:	e00c      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f000 fa7e 	bl	8002da6 <TIM_ITRx_SetConfig>
      break;
 80028aa:	e003      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	73fb      	strb	r3, [r7, #15]
      break;
 80028b0:	e000      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a34      	ldr	r2, [pc, #208]	; (80029b4 <TIM_Base_SetConfig+0xe4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00f      	beq.n	8002908 <TIM_Base_SetConfig+0x38>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ee:	d00b      	beq.n	8002908 <TIM_Base_SetConfig+0x38>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a31      	ldr	r2, [pc, #196]	; (80029b8 <TIM_Base_SetConfig+0xe8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d007      	beq.n	8002908 <TIM_Base_SetConfig+0x38>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a30      	ldr	r2, [pc, #192]	; (80029bc <TIM_Base_SetConfig+0xec>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d003      	beq.n	8002908 <TIM_Base_SetConfig+0x38>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a2f      	ldr	r2, [pc, #188]	; (80029c0 <TIM_Base_SetConfig+0xf0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d108      	bne.n	800291a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a25      	ldr	r2, [pc, #148]	; (80029b4 <TIM_Base_SetConfig+0xe4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01b      	beq.n	800295a <TIM_Base_SetConfig+0x8a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002928:	d017      	beq.n	800295a <TIM_Base_SetConfig+0x8a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a22      	ldr	r2, [pc, #136]	; (80029b8 <TIM_Base_SetConfig+0xe8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <TIM_Base_SetConfig+0x8a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a21      	ldr	r2, [pc, #132]	; (80029bc <TIM_Base_SetConfig+0xec>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00f      	beq.n	800295a <TIM_Base_SetConfig+0x8a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a20      	ldr	r2, [pc, #128]	; (80029c0 <TIM_Base_SetConfig+0xf0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00b      	beq.n	800295a <TIM_Base_SetConfig+0x8a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a1f      	ldr	r2, [pc, #124]	; (80029c4 <TIM_Base_SetConfig+0xf4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <TIM_Base_SetConfig+0x8a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <TIM_Base_SetConfig+0xf8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d003      	beq.n	800295a <TIM_Base_SetConfig+0x8a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <TIM_Base_SetConfig+0xfc>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d108      	bne.n	800296c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a08      	ldr	r2, [pc, #32]	; (80029b4 <TIM_Base_SetConfig+0xe4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d103      	bne.n	80029a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	615a      	str	r2, [r3, #20]
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40010000 	.word	0x40010000
 80029b8:	40000400 	.word	0x40000400
 80029bc:	40000800 	.word	0x40000800
 80029c0:	40000c00 	.word	0x40000c00
 80029c4:	40014000 	.word	0x40014000
 80029c8:	40014400 	.word	0x40014400
 80029cc:	40014800 	.word	0x40014800

080029d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	f023 0201 	bic.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0303 	bic.w	r3, r3, #3
 8002a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f023 0302 	bic.w	r3, r3, #2
 8002a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a1c      	ldr	r2, [pc, #112]	; (8002a98 <TIM_OC1_SetConfig+0xc8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d10c      	bne.n	8002a46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f023 0308 	bic.w	r3, r3, #8
 8002a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f023 0304 	bic.w	r3, r3, #4
 8002a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <TIM_OC1_SetConfig+0xc8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d111      	bne.n	8002a72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	621a      	str	r2, [r3, #32]
}
 8002a8c:	bf00      	nop
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	40010000 	.word	0x40010000

08002a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	f023 0210 	bic.w	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f023 0320 	bic.w	r3, r3, #32
 8002ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a1e      	ldr	r2, [pc, #120]	; (8002b70 <TIM_OC2_SetConfig+0xd4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d10d      	bne.n	8002b18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a15      	ldr	r2, [pc, #84]	; (8002b70 <TIM_OC2_SetConfig+0xd4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d113      	bne.n	8002b48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	621a      	str	r2, [r3, #32]
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40010000 	.word	0x40010000

08002b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f023 0303 	bic.w	r3, r3, #3
 8002baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <TIM_OC3_SetConfig+0xd0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d10d      	bne.n	8002bee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <TIM_OC3_SetConfig+0xd0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d113      	bne.n	8002c1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	621a      	str	r2, [r3, #32]
}
 8002c38:	bf00      	nop
 8002c3a:	371c      	adds	r7, #28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	40010000 	.word	0x40010000

08002c48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	021b      	lsls	r3, r3, #8
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	031b      	lsls	r3, r3, #12
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a10      	ldr	r2, [pc, #64]	; (8002ce4 <TIM_OC4_SetConfig+0x9c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d109      	bne.n	8002cbc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	019b      	lsls	r3, r3, #6
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	621a      	str	r2, [r3, #32]
}
 8002cd6:	bf00      	nop
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40010000 	.word	0x40010000

08002ce8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	f023 0201 	bic.w	r2, r3, #1
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f023 030a 	bic.w	r3, r3, #10
 8002d24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	621a      	str	r2, [r3, #32]
}
 8002d3a:	bf00      	nop
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b087      	sub	sp, #28
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	f023 0210 	bic.w	r2, r3, #16
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	621a      	str	r2, [r3, #32]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f043 0307 	orr.w	r3, r3, #7
 8002dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	609a      	str	r2, [r3, #8]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002df6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	021a      	lsls	r2, r3, #8
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	609a      	str	r2, [r3, #8]
}
 8002e10:	bf00      	nop
 8002e12:	371c      	adds	r7, #28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	2201      	movs	r2, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1a      	ldr	r2, [r3, #32]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	401a      	ands	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a1a      	ldr	r2, [r3, #32]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	fa01 f303 	lsl.w	r3, r1, r3
 8002e54:	431a      	orrs	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	621a      	str	r2, [r3, #32]
}
 8002e5a:	bf00      	nop
 8002e5c:	371c      	adds	r7, #28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e050      	b.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d018      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ecc:	d013      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a18      	ldr	r2, [pc, #96]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00e      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a16      	ldr	r2, [pc, #88]	; (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d009      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a13      	ldr	r2, [pc, #76]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10c      	bne.n	8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40010000 	.word	0x40010000
 8002f34:	40000400 	.word	0x40000400
 8002f38:	40000800 	.word	0x40000800
 8002f3c:	40000c00 	.word	0x40000c00
 8002f40:	40014000 	.word	0x40014000

08002f44 <send_to_lcd>:


/****************************************************************************************************************************************************************/

void send_to_lcd (lcd_t *lcd, char data, int rs)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	72fb      	strb	r3, [r7, #11]
	uint8_t _dataSend[2], steps, i;

	_platform_gpio_write(lcd->gpios[LCD_RS], rs);  // rs = 1 for data, rs=0 for command
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f5c:	f000 fa67 	bl	800342e <_platform_gpio_write>
	_platform_delay_us(5);
 8002f60:	2005      	movs	r0, #5
 8002f62:	f000 fad9 	bl	8003518 <_platform_delay_us>
	if (lcd->interface == LCD_INTERFACE_4BIT){
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d167      	bne.n	8003040 <send_to_lcd+0xfc>
		// will send the dara byte in two steps
		// first is sent the Upper 4 bits (higher nibble) over the interface
		// in the second step, is sent the lower nibble
		steps = 2;
 8002f70:	2302      	movs	r3, #2
 8002f72:	75bb      	strb	r3, [r7, #22]
		_dataSend[0] = (data >> 4);
 8002f74:	7afb      	ldrb	r3, [r7, #11]
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	753b      	strb	r3, [r7, #20]
		_dataSend[1] = (data & 0xF);
 8002f7c:	7afb      	ldrb	r3, [r7, #11]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	757b      	strb	r3, [r7, #21]
		for (i=0 ; i<steps ; i++){
 8002f86:	2300      	movs	r3, #0
 8002f88:	75fb      	strb	r3, [r7, #23]
 8002f8a:	e054      	b.n	8003036 <send_to_lcd+0xf2>
			/* write the data to the respective pin */
			_platform_gpio_write(lcd->gpios[LCD_D7], ((_dataSend[i]>>3)&0x01));
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	3318      	adds	r3, #24
 8002f90:	443b      	add	r3, r7
 8002f92:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8002f96:	08db      	lsrs	r3, r3, #3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3350      	adds	r3, #80	; 0x50
 8002fa4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fa8:	f000 fa41 	bl	800342e <_platform_gpio_write>
			_platform_gpio_write(lcd->gpios[LCD_D6], ((_dataSend[i]>>2)&0x01));
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	3318      	adds	r3, #24
 8002fb0:	443b      	add	r3, r7
 8002fb2:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3348      	adds	r3, #72	; 0x48
 8002fc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fc8:	f000 fa31 	bl	800342e <_platform_gpio_write>
			_platform_gpio_write(lcd->gpios[LCD_D5], ((_dataSend[i]>>1)&0x01));
 8002fcc:	7dfb      	ldrb	r3, [r7, #23]
 8002fce:	3318      	adds	r3, #24
 8002fd0:	443b      	add	r3, r7
 8002fd2:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3340      	adds	r3, #64	; 0x40
 8002fe4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fe8:	f000 fa21 	bl	800342e <_platform_gpio_write>
			_platform_gpio_write(lcd->gpios[LCD_D4], ((_dataSend[i]>>0)&0x01));
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	3318      	adds	r3, #24
 8002ff0:	443b      	add	r3, r7
 8002ff2:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3338      	adds	r3, #56	; 0x38
 8003000:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003004:	f000 fa13 	bl	800342e <_platform_gpio_write>

			/* Toggle EN PIN to send the data
			 */
			_platform_gpio_write(lcd->gpios[LCD_E], 1);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	3310      	adds	r3, #16
 800300e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003012:	f000 fa0c 	bl	800342e <_platform_gpio_write>
			_platform_delay_us(20);
 8003016:	2014      	movs	r0, #20
 8003018:	f000 fa7e 	bl	8003518 <_platform_delay_us>
			_platform_gpio_write(lcd->gpios[LCD_E], 0);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	3310      	adds	r3, #16
 8003022:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003026:	f000 fa02 	bl	800342e <_platform_gpio_write>
			_platform_delay_us(20);
 800302a:	2014      	movs	r0, #20
 800302c:	f000 fa74 	bl	8003518 <_platform_delay_us>
		for (i=0 ; i<steps ; i++){
 8003030:	7dfb      	ldrb	r3, [r7, #23]
 8003032:	3301      	adds	r3, #1
 8003034:	75fb      	strb	r3, [r7, #23]
 8003036:	7dfa      	ldrb	r2, [r7, #23]
 8003038:	7dbb      	ldrb	r3, [r7, #22]
 800303a:	429a      	cmp	r2, r3
 800303c:	d3a6      	bcc.n	8002f8c <send_to_lcd+0x48>
		_platform_gpio_write(lcd->gpios[LCD_E], 1);
		_platform_delay_us(20);
		_platform_gpio_write(lcd->gpios[LCD_E], 0);
		_platform_delay_us(20);
	}
}
 800303e:	e070      	b.n	8003122 <send_to_lcd+0x1de>
		_dataSend[0] = data;
 8003040:	7afb      	ldrb	r3, [r7, #11]
 8003042:	753b      	strb	r3, [r7, #20]
		_platform_gpio_write(lcd->gpios[LCD_D7], ((_dataSend[0]>>7)&0x01));
 8003044:	7d3b      	ldrb	r3, [r7, #20]
 8003046:	09db      	lsrs	r3, r3, #7
 8003048:	b2da      	uxtb	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3350      	adds	r3, #80	; 0x50
 800304e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003052:	f000 f9ec 	bl	800342e <_platform_gpio_write>
		_platform_gpio_write(lcd->gpios[LCD_D6], ((_dataSend[0]>>6)&0x01));
 8003056:	7d3b      	ldrb	r3, [r7, #20]
 8003058:	099b      	lsrs	r3, r3, #6
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	3348      	adds	r3, #72	; 0x48
 8003066:	e893 0003 	ldmia.w	r3, {r0, r1}
 800306a:	f000 f9e0 	bl	800342e <_platform_gpio_write>
		_platform_gpio_write(lcd->gpios[LCD_D5], ((_dataSend[0]>>5)&0x01));
 800306e:	7d3b      	ldrb	r3, [r7, #20]
 8003070:	095b      	lsrs	r3, r3, #5
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	3340      	adds	r3, #64	; 0x40
 800307e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003082:	f000 f9d4 	bl	800342e <_platform_gpio_write>
		_platform_gpio_write(lcd->gpios[LCD_D4], ((_dataSend[0]>>4)&0x01));
 8003086:	7d3b      	ldrb	r3, [r7, #20]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	b2da      	uxtb	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	3338      	adds	r3, #56	; 0x38
 8003096:	e893 0003 	ldmia.w	r3, {r0, r1}
 800309a:	f000 f9c8 	bl	800342e <_platform_gpio_write>
		_platform_gpio_write(lcd->gpios[LCD_D3], ((_dataSend[0]>>3)&0x01));
 800309e:	7d3b      	ldrb	r3, [r7, #20]
 80030a0:	08db      	lsrs	r3, r3, #3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3330      	adds	r3, #48	; 0x30
 80030ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030b2:	f000 f9bc 	bl	800342e <_platform_gpio_write>
		_platform_gpio_write(lcd->gpios[LCD_D2], ((_dataSend[0]>>2)&0x01));
 80030b6:	7d3b      	ldrb	r3, [r7, #20]
 80030b8:	089b      	lsrs	r3, r3, #2
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3328      	adds	r3, #40	; 0x28
 80030c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030ca:	f000 f9b0 	bl	800342e <_platform_gpio_write>
		_platform_gpio_write(lcd->gpios[LCD_D1], ((_dataSend[0]>>1)&0x01));
 80030ce:	7d3b      	ldrb	r3, [r7, #20]
 80030d0:	085b      	lsrs	r3, r3, #1
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3320      	adds	r3, #32
 80030de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030e2:	f000 f9a4 	bl	800342e <_platform_gpio_write>
		_platform_gpio_write(lcd->gpios[LCD_D0], ((_dataSend[0]>>0)&0x01));
 80030e6:	7d3b      	ldrb	r3, [r7, #20]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3318      	adds	r3, #24
 80030f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030f6:	f000 f99a 	bl	800342e <_platform_gpio_write>
		_platform_gpio_write(lcd->gpios[LCD_E], 1);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	3310      	adds	r3, #16
 8003100:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003104:	f000 f993 	bl	800342e <_platform_gpio_write>
		_platform_delay_us(20);
 8003108:	2014      	movs	r0, #20
 800310a:	f000 fa05 	bl	8003518 <_platform_delay_us>
		_platform_gpio_write(lcd->gpios[LCD_E], 0);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	3310      	adds	r3, #16
 8003114:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003118:	f000 f989 	bl	800342e <_platform_gpio_write>
		_platform_delay_us(20);
 800311c:	2014      	movs	r0, #20
 800311e:	f000 f9fb 	bl	8003518 <_platform_delay_us>
}
 8003122:	bf00      	nop
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <lcd_init>:
/**
 * Publics
 */

void lcd_init (lcd_t *lcd)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
	uint8_t dispDl, dispFont;

	if (lcd->font == LCD_FONT_5X8){
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003138:	2b00      	cmp	r3, #0
 800313a:	d102      	bne.n	8003142 <lcd_init+0x18>
		dispFont = DISPLAY_FONT_5x8;
 800313c:	2300      	movs	r3, #0
 800313e:	73bb      	strb	r3, [r7, #14]
 8003140:	e001      	b.n	8003146 <lcd_init+0x1c>
	}
	else{
		dispFont = DISPLAY_FONT_5x10;
 8003142:	2304      	movs	r3, #4
 8003144:	73bb      	strb	r3, [r7, #14]
	}
	_platform_delay_ms(50);  	// wait for >40ms
 8003146:	2032      	movs	r0, #50	; 0x32
 8003148:	f000 f9da 	bl	8003500 <_platform_delay_ms>
	lcd_cmd (lcd, LCD_CMD_FUNCTION_SET | DISPLAY_DL_8BIT);
 800314c:	2130      	movs	r1, #48	; 0x30
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f867 	bl	8003222 <lcd_cmd>
	_platform_delay_ms(5);  	// wait for >4.1ms
 8003154:	2005      	movs	r0, #5
 8003156:	f000 f9d3 	bl	8003500 <_platform_delay_ms>
	lcd_cmd (lcd, LCD_CMD_FUNCTION_SET | DISPLAY_DL_8BIT);
 800315a:	2130      	movs	r1, #48	; 0x30
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f860 	bl	8003222 <lcd_cmd>
	_platform_delay_us(200);  	// wait for >100us
 8003162:	20c8      	movs	r0, #200	; 0xc8
 8003164:	f000 f9d8 	bl	8003518 <_platform_delay_us>
	lcd_cmd (lcd, LCD_CMD_FUNCTION_SET | DISPLAY_DL_8BIT);
 8003168:	2130      	movs	r1, #48	; 0x30
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f859 	bl	8003222 <lcd_cmd>
	_platform_delay_us(200);	// wait for >100us
 8003170:	20c8      	movs	r0, #200	; 0xc8
 8003172:	f000 f9d1 	bl	8003518 <_platform_delay_us>
	if (lcd->interface == LCD_INTERFACE_4BIT){
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800317c:	2b00      	cmp	r3, #0
 800317e:	d106      	bne.n	800318e <lcd_init+0x64>
		// 4 bit initialisation
		lcd_cmd (lcd, LCD_CMD_FUNCTION_SET | DISPLAY_DL_4BIT);  // 4bit mode
 8003180:	2120      	movs	r1, #32
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f84d 	bl	8003222 <lcd_cmd>
		dispDl = DISPLAY_DL_4BIT;
 8003188:	2300      	movs	r3, #0
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	e005      	b.n	800319a <lcd_init+0x70>
	}
	else{
		lcd_cmd (lcd, LCD_CMD_FUNCTION_SET | DISPLAY_DL_8BIT);
 800318e:	2130      	movs	r1, #48	; 0x30
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f846 	bl	8003222 <lcd_cmd>
		dispDl = DISPLAY_DL_8BIT;
 8003196:	2310      	movs	r3, #16
 8003198:	73fb      	strb	r3, [r7, #15]
	}
	_platform_delay_ms(10);
 800319a:	200a      	movs	r0, #10
 800319c:	f000 f9b0 	bl	8003500 <_platform_delay_ms>

  // dislay initialisation
	lcd->_cursor = DISPLAY_CONTROL_ON | DISPLAY_CURSOR_OFF | DISPLAY_BLINK_OFF;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2204      	movs	r2, #4
 80031a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	lcd_cmd (lcd, LCD_CMD_FUNCTION_SET | dispDl | DISPLAY_N_2LINE | dispFont); // Function set --> DL=0 or 1, N = 1 (2 line display) F = 0 (5x8 characters)
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	7bbb      	ldrb	r3, [r7, #14]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	4619      	mov	r1, r3
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f832 	bl	8003222 <lcd_cmd>
	_platform_delay_ms(1);
 80031be:	2001      	movs	r0, #1
 80031c0:	f000 f99e 	bl	8003500 <_platform_delay_ms>
	lcd_cmd (lcd, LCD_CMD_DISP_CONTROL); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80031c4:	2108      	movs	r1, #8
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f82b 	bl	8003222 <lcd_cmd>
	_platform_delay_ms(1);
 80031cc:	2001      	movs	r0, #1
 80031ce:	f000 f997 	bl	8003500 <_platform_delay_ms>
	lcd_cmd (lcd, LCD_CMD_CLEAR);  // clear display
 80031d2:	2101      	movs	r1, #1
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f824 	bl	8003222 <lcd_cmd>
	_platform_delay_ms(2);
 80031da:	2002      	movs	r0, #2
 80031dc:	f000 f990 	bl	8003500 <_platform_delay_ms>
	lcd_cmd (lcd, LCD_CMD_INC_CURSOR); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80031e0:	2106      	movs	r1, #6
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f81d 	bl	8003222 <lcd_cmd>
	_platform_delay_ms(1);
 80031e8:	2001      	movs	r0, #1
 80031ea:	f000 f989 	bl	8003500 <_platform_delay_ms>
	lcd_cmd (lcd, LCD_CMD_DISP_CONTROL | lcd->_cursor); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80031f4:	f043 0308 	orr.w	r3, r3, #8
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	4619      	mov	r1, r3
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f810 	bl	8003222 <lcd_cmd>

	lcd_cmd(lcd, LCD_CMD_RETURN_HOME);
 8003202:	2102      	movs	r1, #2
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f80c 	bl	8003222 <lcd_cmd>
	lcd->_column = 0;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	lcd->_row = 0;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
}
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <lcd_cmd>:
	lcd->_cursor |= (DISPLAY_CONTROL_ON);
	lcd_cmd(lcd, LCD_CMD_DISP_CONTROL | lcd->_cursor);
}

void lcd_cmd (lcd_t *lcd, lcd_cmd_e cmd)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	70fb      	strb	r3, [r7, #3]
	send_to_lcd(lcd, (uint8_t)cmd, LCD_RS_OFF);
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	2200      	movs	r2, #0
 8003232:	4619      	mov	r1, r3
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff fe85 	bl	8002f44 <send_to_lcd>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <lcd_data>:

void lcd_data (lcd_t *lcd, uint8_t data){
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	460b      	mov	r3, r1
 800324c:	70fb      	strb	r3, [r7, #3]
	send_to_lcd(lcd, data, LCD_RS_ON);
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	2201      	movs	r2, #1
 8003252:	4619      	mov	r1, r3
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff fe75 	bl	8002f44 <send_to_lcd>
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <lcd_put_pos>:

void lcd_put_pos(lcd_t *lcd, uint8_t row, uint8_t col)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
 8003270:	4613      	mov	r3, r2
 8003272:	70bb      	strb	r3, [r7, #2]
	if (row >= lcd->rows || col >= lcd->columns){
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327a:	429a      	cmp	r2, r3
 800327c:	d234      	bcs.n	80032e8 <lcd_put_pos+0x84>
 800327e:	78ba      	ldrb	r2, [r7, #2]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	429a      	cmp	r2, r3
 8003286:	d22f      	bcs.n	80032e8 <lcd_put_pos+0x84>
		return;
	}
    lcd->_column = col;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	78ba      	ldrb	r2, [r7, #2]
 800328c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    lcd->_row = row;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
    switch (row)
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	2b03      	cmp	r3, #3
 800329c:	d81e      	bhi.n	80032dc <lcd_put_pos+0x78>
 800329e:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <lcd_put_pos+0x40>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032b5 	.word	0x080032b5
 80032a8:	080032bf 	.word	0x080032bf
 80032ac:	080032c9 	.word	0x080032c9
 80032b0:	080032d3 	.word	0x080032d3
    {
        case 0:
            col |= 0x80;
 80032b4:	78bb      	ldrb	r3, [r7, #2]
 80032b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032ba:	70bb      	strb	r3, [r7, #2]
            break;
 80032bc:	e00e      	b.n	80032dc <lcd_put_pos+0x78>
        case 1:
            col |= 0xC0;
 80032be:	78bb      	ldrb	r3, [r7, #2]
 80032c0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80032c4:	70bb      	strb	r3, [r7, #2]
            break;
 80032c6:	e009      	b.n	80032dc <lcd_put_pos+0x78>
        case 2:
        	col |= 0x94;
 80032c8:	78bb      	ldrb	r3, [r7, #2]
 80032ca:	f063 036b 	orn	r3, r3, #107	; 0x6b
 80032ce:	70bb      	strb	r3, [r7, #2]
        	break;
 80032d0:	e004      	b.n	80032dc <lcd_put_pos+0x78>
        case 3:
        	col |= 0xD4;
 80032d2:	78bb      	ldrb	r3, [r7, #2]
 80032d4:	f063 032b 	orn	r3, r3, #43	; 0x2b
 80032d8:	70bb      	strb	r3, [r7, #2]
        	break;
 80032da:	bf00      	nop
    }
    lcd_cmd (lcd, col);
 80032dc:	78bb      	ldrb	r3, [r7, #2]
 80032de:	4619      	mov	r1, r3
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ff9e 	bl	8003222 <lcd_cmd>
 80032e6:	e000      	b.n	80032ea <lcd_put_pos+0x86>
		return;
 80032e8:	bf00      	nop
}
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <lcd_send_char>:

void lcd_send_char (lcd_t *lcd, char data){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	70fb      	strb	r3, [r7, #3]
	if (lcd->_column >= lcd->columns || lcd->_row >= lcd->rows){
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8003302:	461a      	mov	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	429a      	cmp	r2, r3
 800330a:	d215      	bcs.n	8003338 <lcd_send_char+0x48>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003312:	461a      	mov	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	429a      	cmp	r2, r3
 800331a:	d20d      	bcs.n	8003338 <lcd_send_char+0x48>
		return;
	}
	lcd_data(lcd, (uint8_t)data);
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	4619      	mov	r1, r3
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff ff8e 	bl	8003242 <lcd_data>
	lcd->_column++;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800332c:	3301      	adds	r3, #1
 800332e:	b2da      	uxtb	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8003336:	e000      	b.n	800333a <lcd_send_char+0x4a>
		return;
 8003338:	bf00      	nop
}
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <lcd_send_string>:

void lcd_send_string (lcd_t *lcd, char *str)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
	while (*str)lcd_send_char (lcd, (*str++));
 800334a:	e007      	b.n	800335c <lcd_send_string+0x1c>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	603a      	str	r2, [r7, #0]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	4619      	mov	r1, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff ffca 	bl	80032f0 <lcd_send_char>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f3      	bne.n	800334c <lcd_send_string+0xc>
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <lcd_send_string_pos>:
void lcd_send_char_pos(lcd_t *lcd, char data, uint8_t row, uint8_t col){
	lcd_put_pos(lcd, row, col);
	lcd_send_char(lcd, data);
}

void lcd_send_string_pos (lcd_t *lcd, char *str, uint8_t row, uint8_t col){
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	4611      	mov	r1, r2
 800337a:	461a      	mov	r2, r3
 800337c:	460b      	mov	r3, r1
 800337e:	71fb      	strb	r3, [r7, #7]
 8003380:	4613      	mov	r3, r2
 8003382:	71bb      	strb	r3, [r7, #6]
	lcd_put_pos(lcd, row, col);
 8003384:	79ba      	ldrb	r2, [r7, #6]
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	4619      	mov	r1, r3
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f7ff ff6a 	bl	8003264 <lcd_put_pos>
	lcd_send_string(lcd, str);
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff ffd4 	bl	8003340 <lcd_send_string>
}
 8003398:	bf00      	nop
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <lcd_create_custom_char>:
void lcd_clear_all (lcd_t *lcd){
	lcd_cmd(lcd, LCD_CMD_CLEAR);
	_platform_delay_ms(2);
}

void lcd_create_custom_char (lcd_t *lcd, lcd_custom_char_e custom, uint8_t *bitmap){
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	460b      	mov	r3, r1
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	72fb      	strb	r3, [r7, #11]
	uint8_t i, rows, offset;

	if (lcd->font == LCD_FONT_5X8){
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <lcd_create_custom_char+0x1e>
		rows = 8;
 80033b8:	2308      	movs	r3, #8
 80033ba:	75bb      	strb	r3, [r7, #22]
 80033bc:	e001      	b.n	80033c2 <lcd_create_custom_char+0x22>
	}
	else{
		rows = 10;
 80033be:	230a      	movs	r3, #10
 80033c0:	75bb      	strb	r3, [r7, #22]
	}
	offset = custom*0x8;
 80033c2:	7afb      	ldrb	r3, [r7, #11]
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	757b      	strb	r3, [r7, #21]
	lcd_cmd(lcd, LCD_CMD_SET_CGRAM | offset);
 80033c8:	7d7b      	ldrb	r3, [r7, #21]
 80033ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	4619      	mov	r1, r3
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f7ff ff25 	bl	8003222 <lcd_cmd>
	for (i=0 ; i<rows ; i++){
 80033d8:	2300      	movs	r3, #0
 80033da:	75fb      	strb	r3, [r7, #23]
 80033dc:	e00a      	b.n	80033f4 <lcd_create_custom_char+0x54>
		lcd_data(lcd, bitmap[i]);
 80033de:	7dfb      	ldrb	r3, [r7, #23]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4413      	add	r3, r2
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	4619      	mov	r1, r3
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7ff ff2a 	bl	8003242 <lcd_data>
	for (i=0 ; i<rows ; i++){
 80033ee:	7dfb      	ldrb	r3, [r7, #23]
 80033f0:	3301      	adds	r3, #1
 80033f2:	75fb      	strb	r3, [r7, #23]
 80033f4:	7dfa      	ldrb	r2, [r7, #23]
 80033f6:	7dbb      	ldrb	r3, [r7, #22]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d3f0      	bcc.n	80033de <lcd_create_custom_char+0x3e>
	}
	lcd_cmd(lcd, LCD_CMD_RETURN_HOME);
 80033fc:	2102      	movs	r1, #2
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff ff0f 	bl	8003222 <lcd_cmd>
}
 8003404:	bf00      	nop
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <lcd_backlight_set_bright>:

void lcd_backlight_set (lcd_t *lcd, uint8_t state){
	_platform_gpio_write(lcd->backlightGpio, (state > 0));
}

void lcd_backlight_set_bright (lcd_t *lcd, uint8_t level){
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	70fb      	strb	r3, [r7, #3]
	_platform_pwm_control(lcd->backlightPwm, level);
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	336c      	adds	r3, #108	; 0x6c
 800341e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003422:	f000 f81d 	bl	8003460 <_platform_pwm_control>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <_platform_gpio_write>:

#include "platform.h"

#include <stm32f4xx.h>

void _platform_gpio_write(gpio_t Gpio, uint8_t Val){
 800342e:	b580      	push	{r7, lr}
 8003430:	b086      	sub	sp, #24
 8003432:	af00      	add	r7, sp, #0
 8003434:	f107 0308 	add.w	r3, r7, #8
 8003438:	e883 0003 	stmia.w	r3, {r0, r1}
 800343c:	4613      	mov	r3, r2
 800343e:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef *gpio = (GPIO_TypeDef*)Gpio.GPIO;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	617b      	str	r3, [r7, #20]
	uint32_t pin = Gpio.pin;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(gpio, pin, (GPIO_PinState)Val);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	b29b      	uxth	r3, r3
 800344c:	79fa      	ldrb	r2, [r7, #7]
 800344e:	4619      	mov	r1, r3
 8003450:	6978      	ldr	r0, [r7, #20]
 8003452:	f7fe fab9 	bl	80019c8 <HAL_GPIO_WritePin>
}
 8003456:	bf00      	nop
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <_platform_pwm_control>:
	uint32_t pin = Gpio.pin;

	return (uint8_t)HAL_GPIO_ReadPin(gpio, pin);
}

void _platform_pwm_control(pwm_t PwmHandle, uint8_t duty){
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	f107 0308 	add.w	r3, r7, #8
 800346a:	e883 0003 	stmia.w	r3, {r0, r1}
 800346e:	4613      	mov	r3, r2
 8003470:	71fb      	strb	r3, [r7, #7]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef*)PwmHandle.Peripheral;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	61fb      	str	r3, [r7, #28]
	uint32_t channel = PwmHandle.Channel;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	61bb      	str	r3, [r7, #24]

	if (duty == 0){
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d104      	bne.n	800348a <_platform_pwm_control+0x2a>
		HAL_TIM_PWM_Stop(htim, channel);
 8003480:	69b9      	ldr	r1, [r7, #24]
 8003482:	69f8      	ldr	r0, [r7, #28]
 8003484:	f7ff f836 	bl	80024f4 <HAL_TIM_PWM_Stop>
 8003488:	e004      	b.n	8003494 <_platform_pwm_control+0x34>
	}
	else if (duty > 100){
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	2b64      	cmp	r3, #100	; 0x64
 800348e:	d901      	bls.n	8003494 <_platform_pwm_control+0x34>
		duty = 100;
 8003490:	2364      	movs	r3, #100	; 0x64
 8003492:	71fb      	strb	r3, [r7, #7]
	}
	if (duty != 0){
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d02c      	beq.n	80034f4 <_platform_pwm_control+0x94>
		uint32_t arr = __HAL_TIM_GET_AUTORELOAD(htim);
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	617b      	str	r3, [r7, #20]
		uint32_t cmp = arr*duty/100;
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	fb02 f303 	mul.w	r3, r2, r3
 80034aa:	4a14      	ldr	r2, [pc, #80]	; (80034fc <_platform_pwm_control+0x9c>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	613b      	str	r3, [r7, #16]

		__HAL_TIM_SET_COMPARE(htim, channel, cmp);
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d104      	bne.n	80034c4 <_platform_pwm_control+0x64>
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	635a      	str	r2, [r3, #52]	; 0x34
 80034c2:	e013      	b.n	80034ec <_platform_pwm_control+0x8c>
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d104      	bne.n	80034d4 <_platform_pwm_control+0x74>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	6393      	str	r3, [r2, #56]	; 0x38
 80034d2:	e00b      	b.n	80034ec <_platform_pwm_control+0x8c>
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d104      	bne.n	80034e4 <_platform_pwm_control+0x84>
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80034e2:	e003      	b.n	80034ec <_platform_pwm_control+0x8c>
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	6413      	str	r3, [r2, #64]	; 0x40
		HAL_TIM_PWM_Start(htim, channel);
 80034ec:	69b9      	ldr	r1, [r7, #24]
 80034ee:	69f8      	ldr	r0, [r7, #28]
 80034f0:	f7fe ff50 	bl	8002394 <HAL_TIM_PWM_Start>
	}
}
 80034f4:	bf00      	nop
 80034f6:	3720      	adds	r7, #32
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	51eb851f 	.word	0x51eb851f

08003500 <_platform_delay_ms>:

void _platform_delay_ms(uint32_t ms){
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7fd ffcf 	bl	80014ac <HAL_Delay>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <_platform_delay_us>:

void _platform_delay_us(uint32_t us){
 8003518:	b5b0      	push	{r4, r5, r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	uint32_t sysclk = HAL_RCC_GetSysClockFreq();
 8003520:	f7fe fdca 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8003524:	60b8      	str	r0, [r7, #8]
	uint32_t ticks = ((sysclk)/(2E6))*us;
 8003526:	68b8      	ldr	r0, [r7, #8]
 8003528:	f7fc ffec 	bl	8000504 <__aeabi_ui2d>
 800352c:	a312      	add	r3, pc, #72	; (adr r3, 8003578 <_platform_delay_us+0x60>)
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	f7fd f98b 	bl	800084c <__aeabi_ddiv>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4614      	mov	r4, r2
 800353c:	461d      	mov	r5, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fc ffe0 	bl	8000504 <__aeabi_ui2d>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4620      	mov	r0, r4
 800354a:	4629      	mov	r1, r5
 800354c:	f7fd f854 	bl	80005f8 <__aeabi_dmul>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	f7fd fa60 	bl	8000a1c <__aeabi_d2uiz>
 800355c:	4603      	mov	r3, r0
 800355e:	60fb      	str	r3, [r7, #12]

	while (ticks > 0){
 8003560:	e002      	b.n	8003568 <_platform_delay_us+0x50>
		ticks--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	3b01      	subs	r3, #1
 8003566:	60fb      	str	r3, [r7, #12]
	while (ticks > 0){
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f9      	bne.n	8003562 <_platform_delay_us+0x4a>
	}
}
 800356e:	bf00      	nop
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bdb0      	pop	{r4, r5, r7, pc}
 8003578:	00000000 	.word	0x00000000
 800357c:	413e8480 	.word	0x413e8480

08003580 <__errno>:
 8003580:	4b01      	ldr	r3, [pc, #4]	; (8003588 <__errno+0x8>)
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20000010 	.word	0x20000010

0800358c <__libc_init_array>:
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	4d0d      	ldr	r5, [pc, #52]	; (80035c4 <__libc_init_array+0x38>)
 8003590:	4c0d      	ldr	r4, [pc, #52]	; (80035c8 <__libc_init_array+0x3c>)
 8003592:	1b64      	subs	r4, r4, r5
 8003594:	10a4      	asrs	r4, r4, #2
 8003596:	2600      	movs	r6, #0
 8003598:	42a6      	cmp	r6, r4
 800359a:	d109      	bne.n	80035b0 <__libc_init_array+0x24>
 800359c:	4d0b      	ldr	r5, [pc, #44]	; (80035cc <__libc_init_array+0x40>)
 800359e:	4c0c      	ldr	r4, [pc, #48]	; (80035d0 <__libc_init_array+0x44>)
 80035a0:	f000 fc8e 	bl	8003ec0 <_init>
 80035a4:	1b64      	subs	r4, r4, r5
 80035a6:	10a4      	asrs	r4, r4, #2
 80035a8:	2600      	movs	r6, #0
 80035aa:	42a6      	cmp	r6, r4
 80035ac:	d105      	bne.n	80035ba <__libc_init_array+0x2e>
 80035ae:	bd70      	pop	{r4, r5, r6, pc}
 80035b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b4:	4798      	blx	r3
 80035b6:	3601      	adds	r6, #1
 80035b8:	e7ee      	b.n	8003598 <__libc_init_array+0xc>
 80035ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80035be:	4798      	blx	r3
 80035c0:	3601      	adds	r6, #1
 80035c2:	e7f2      	b.n	80035aa <__libc_init_array+0x1e>
 80035c4:	08003f4c 	.word	0x08003f4c
 80035c8:	08003f4c 	.word	0x08003f4c
 80035cc:	08003f4c 	.word	0x08003f4c
 80035d0:	08003f50 	.word	0x08003f50

080035d4 <memset>:
 80035d4:	4402      	add	r2, r0
 80035d6:	4603      	mov	r3, r0
 80035d8:	4293      	cmp	r3, r2
 80035da:	d100      	bne.n	80035de <memset+0xa>
 80035dc:	4770      	bx	lr
 80035de:	f803 1b01 	strb.w	r1, [r3], #1
 80035e2:	e7f9      	b.n	80035d8 <memset+0x4>

080035e4 <siprintf>:
 80035e4:	b40e      	push	{r1, r2, r3}
 80035e6:	b500      	push	{lr}
 80035e8:	b09c      	sub	sp, #112	; 0x70
 80035ea:	ab1d      	add	r3, sp, #116	; 0x74
 80035ec:	9002      	str	r0, [sp, #8]
 80035ee:	9006      	str	r0, [sp, #24]
 80035f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035f4:	4809      	ldr	r0, [pc, #36]	; (800361c <siprintf+0x38>)
 80035f6:	9107      	str	r1, [sp, #28]
 80035f8:	9104      	str	r1, [sp, #16]
 80035fa:	4909      	ldr	r1, [pc, #36]	; (8003620 <siprintf+0x3c>)
 80035fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003600:	9105      	str	r1, [sp, #20]
 8003602:	6800      	ldr	r0, [r0, #0]
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	a902      	add	r1, sp, #8
 8003608:	f000 f868 	bl	80036dc <_svfiprintf_r>
 800360c:	9b02      	ldr	r3, [sp, #8]
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	b01c      	add	sp, #112	; 0x70
 8003614:	f85d eb04 	ldr.w	lr, [sp], #4
 8003618:	b003      	add	sp, #12
 800361a:	4770      	bx	lr
 800361c:	20000010 	.word	0x20000010
 8003620:	ffff0208 	.word	0xffff0208

08003624 <__ssputs_r>:
 8003624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003628:	688e      	ldr	r6, [r1, #8]
 800362a:	429e      	cmp	r6, r3
 800362c:	4682      	mov	sl, r0
 800362e:	460c      	mov	r4, r1
 8003630:	4690      	mov	r8, r2
 8003632:	461f      	mov	r7, r3
 8003634:	d838      	bhi.n	80036a8 <__ssputs_r+0x84>
 8003636:	898a      	ldrh	r2, [r1, #12]
 8003638:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800363c:	d032      	beq.n	80036a4 <__ssputs_r+0x80>
 800363e:	6825      	ldr	r5, [r4, #0]
 8003640:	6909      	ldr	r1, [r1, #16]
 8003642:	eba5 0901 	sub.w	r9, r5, r1
 8003646:	6965      	ldr	r5, [r4, #20]
 8003648:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800364c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003650:	3301      	adds	r3, #1
 8003652:	444b      	add	r3, r9
 8003654:	106d      	asrs	r5, r5, #1
 8003656:	429d      	cmp	r5, r3
 8003658:	bf38      	it	cc
 800365a:	461d      	movcc	r5, r3
 800365c:	0553      	lsls	r3, r2, #21
 800365e:	d531      	bpl.n	80036c4 <__ssputs_r+0xa0>
 8003660:	4629      	mov	r1, r5
 8003662:	f000 fb63 	bl	8003d2c <_malloc_r>
 8003666:	4606      	mov	r6, r0
 8003668:	b950      	cbnz	r0, 8003680 <__ssputs_r+0x5c>
 800366a:	230c      	movs	r3, #12
 800366c:	f8ca 3000 	str.w	r3, [sl]
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003676:	81a3      	strh	r3, [r4, #12]
 8003678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800367c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003680:	6921      	ldr	r1, [r4, #16]
 8003682:	464a      	mov	r2, r9
 8003684:	f000 fabe 	bl	8003c04 <memcpy>
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800368e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003692:	81a3      	strh	r3, [r4, #12]
 8003694:	6126      	str	r6, [r4, #16]
 8003696:	6165      	str	r5, [r4, #20]
 8003698:	444e      	add	r6, r9
 800369a:	eba5 0509 	sub.w	r5, r5, r9
 800369e:	6026      	str	r6, [r4, #0]
 80036a0:	60a5      	str	r5, [r4, #8]
 80036a2:	463e      	mov	r6, r7
 80036a4:	42be      	cmp	r6, r7
 80036a6:	d900      	bls.n	80036aa <__ssputs_r+0x86>
 80036a8:	463e      	mov	r6, r7
 80036aa:	6820      	ldr	r0, [r4, #0]
 80036ac:	4632      	mov	r2, r6
 80036ae:	4641      	mov	r1, r8
 80036b0:	f000 fab6 	bl	8003c20 <memmove>
 80036b4:	68a3      	ldr	r3, [r4, #8]
 80036b6:	1b9b      	subs	r3, r3, r6
 80036b8:	60a3      	str	r3, [r4, #8]
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	4433      	add	r3, r6
 80036be:	6023      	str	r3, [r4, #0]
 80036c0:	2000      	movs	r0, #0
 80036c2:	e7db      	b.n	800367c <__ssputs_r+0x58>
 80036c4:	462a      	mov	r2, r5
 80036c6:	f000 fba5 	bl	8003e14 <_realloc_r>
 80036ca:	4606      	mov	r6, r0
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d1e1      	bne.n	8003694 <__ssputs_r+0x70>
 80036d0:	6921      	ldr	r1, [r4, #16]
 80036d2:	4650      	mov	r0, sl
 80036d4:	f000 fabe 	bl	8003c54 <_free_r>
 80036d8:	e7c7      	b.n	800366a <__ssputs_r+0x46>
	...

080036dc <_svfiprintf_r>:
 80036dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e0:	4698      	mov	r8, r3
 80036e2:	898b      	ldrh	r3, [r1, #12]
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	b09d      	sub	sp, #116	; 0x74
 80036e8:	4607      	mov	r7, r0
 80036ea:	460d      	mov	r5, r1
 80036ec:	4614      	mov	r4, r2
 80036ee:	d50e      	bpl.n	800370e <_svfiprintf_r+0x32>
 80036f0:	690b      	ldr	r3, [r1, #16]
 80036f2:	b963      	cbnz	r3, 800370e <_svfiprintf_r+0x32>
 80036f4:	2140      	movs	r1, #64	; 0x40
 80036f6:	f000 fb19 	bl	8003d2c <_malloc_r>
 80036fa:	6028      	str	r0, [r5, #0]
 80036fc:	6128      	str	r0, [r5, #16]
 80036fe:	b920      	cbnz	r0, 800370a <_svfiprintf_r+0x2e>
 8003700:	230c      	movs	r3, #12
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003708:	e0d1      	b.n	80038ae <_svfiprintf_r+0x1d2>
 800370a:	2340      	movs	r3, #64	; 0x40
 800370c:	616b      	str	r3, [r5, #20]
 800370e:	2300      	movs	r3, #0
 8003710:	9309      	str	r3, [sp, #36]	; 0x24
 8003712:	2320      	movs	r3, #32
 8003714:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003718:	f8cd 800c 	str.w	r8, [sp, #12]
 800371c:	2330      	movs	r3, #48	; 0x30
 800371e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80038c8 <_svfiprintf_r+0x1ec>
 8003722:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003726:	f04f 0901 	mov.w	r9, #1
 800372a:	4623      	mov	r3, r4
 800372c:	469a      	mov	sl, r3
 800372e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003732:	b10a      	cbz	r2, 8003738 <_svfiprintf_r+0x5c>
 8003734:	2a25      	cmp	r2, #37	; 0x25
 8003736:	d1f9      	bne.n	800372c <_svfiprintf_r+0x50>
 8003738:	ebba 0b04 	subs.w	fp, sl, r4
 800373c:	d00b      	beq.n	8003756 <_svfiprintf_r+0x7a>
 800373e:	465b      	mov	r3, fp
 8003740:	4622      	mov	r2, r4
 8003742:	4629      	mov	r1, r5
 8003744:	4638      	mov	r0, r7
 8003746:	f7ff ff6d 	bl	8003624 <__ssputs_r>
 800374a:	3001      	adds	r0, #1
 800374c:	f000 80aa 	beq.w	80038a4 <_svfiprintf_r+0x1c8>
 8003750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003752:	445a      	add	r2, fp
 8003754:	9209      	str	r2, [sp, #36]	; 0x24
 8003756:	f89a 3000 	ldrb.w	r3, [sl]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80a2 	beq.w	80038a4 <_svfiprintf_r+0x1c8>
 8003760:	2300      	movs	r3, #0
 8003762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800376a:	f10a 0a01 	add.w	sl, sl, #1
 800376e:	9304      	str	r3, [sp, #16]
 8003770:	9307      	str	r3, [sp, #28]
 8003772:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003776:	931a      	str	r3, [sp, #104]	; 0x68
 8003778:	4654      	mov	r4, sl
 800377a:	2205      	movs	r2, #5
 800377c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003780:	4851      	ldr	r0, [pc, #324]	; (80038c8 <_svfiprintf_r+0x1ec>)
 8003782:	f7fc fd2d 	bl	80001e0 <memchr>
 8003786:	9a04      	ldr	r2, [sp, #16]
 8003788:	b9d8      	cbnz	r0, 80037c2 <_svfiprintf_r+0xe6>
 800378a:	06d0      	lsls	r0, r2, #27
 800378c:	bf44      	itt	mi
 800378e:	2320      	movmi	r3, #32
 8003790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003794:	0711      	lsls	r1, r2, #28
 8003796:	bf44      	itt	mi
 8003798:	232b      	movmi	r3, #43	; 0x2b
 800379a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800379e:	f89a 3000 	ldrb.w	r3, [sl]
 80037a2:	2b2a      	cmp	r3, #42	; 0x2a
 80037a4:	d015      	beq.n	80037d2 <_svfiprintf_r+0xf6>
 80037a6:	9a07      	ldr	r2, [sp, #28]
 80037a8:	4654      	mov	r4, sl
 80037aa:	2000      	movs	r0, #0
 80037ac:	f04f 0c0a 	mov.w	ip, #10
 80037b0:	4621      	mov	r1, r4
 80037b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037b6:	3b30      	subs	r3, #48	; 0x30
 80037b8:	2b09      	cmp	r3, #9
 80037ba:	d94e      	bls.n	800385a <_svfiprintf_r+0x17e>
 80037bc:	b1b0      	cbz	r0, 80037ec <_svfiprintf_r+0x110>
 80037be:	9207      	str	r2, [sp, #28]
 80037c0:	e014      	b.n	80037ec <_svfiprintf_r+0x110>
 80037c2:	eba0 0308 	sub.w	r3, r0, r8
 80037c6:	fa09 f303 	lsl.w	r3, r9, r3
 80037ca:	4313      	orrs	r3, r2
 80037cc:	9304      	str	r3, [sp, #16]
 80037ce:	46a2      	mov	sl, r4
 80037d0:	e7d2      	b.n	8003778 <_svfiprintf_r+0x9c>
 80037d2:	9b03      	ldr	r3, [sp, #12]
 80037d4:	1d19      	adds	r1, r3, #4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	9103      	str	r1, [sp, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bfbb      	ittet	lt
 80037de:	425b      	neglt	r3, r3
 80037e0:	f042 0202 	orrlt.w	r2, r2, #2
 80037e4:	9307      	strge	r3, [sp, #28]
 80037e6:	9307      	strlt	r3, [sp, #28]
 80037e8:	bfb8      	it	lt
 80037ea:	9204      	strlt	r2, [sp, #16]
 80037ec:	7823      	ldrb	r3, [r4, #0]
 80037ee:	2b2e      	cmp	r3, #46	; 0x2e
 80037f0:	d10c      	bne.n	800380c <_svfiprintf_r+0x130>
 80037f2:	7863      	ldrb	r3, [r4, #1]
 80037f4:	2b2a      	cmp	r3, #42	; 0x2a
 80037f6:	d135      	bne.n	8003864 <_svfiprintf_r+0x188>
 80037f8:	9b03      	ldr	r3, [sp, #12]
 80037fa:	1d1a      	adds	r2, r3, #4
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	9203      	str	r2, [sp, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	bfb8      	it	lt
 8003804:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003808:	3402      	adds	r4, #2
 800380a:	9305      	str	r3, [sp, #20]
 800380c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80038d8 <_svfiprintf_r+0x1fc>
 8003810:	7821      	ldrb	r1, [r4, #0]
 8003812:	2203      	movs	r2, #3
 8003814:	4650      	mov	r0, sl
 8003816:	f7fc fce3 	bl	80001e0 <memchr>
 800381a:	b140      	cbz	r0, 800382e <_svfiprintf_r+0x152>
 800381c:	2340      	movs	r3, #64	; 0x40
 800381e:	eba0 000a 	sub.w	r0, r0, sl
 8003822:	fa03 f000 	lsl.w	r0, r3, r0
 8003826:	9b04      	ldr	r3, [sp, #16]
 8003828:	4303      	orrs	r3, r0
 800382a:	3401      	adds	r4, #1
 800382c:	9304      	str	r3, [sp, #16]
 800382e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003832:	4826      	ldr	r0, [pc, #152]	; (80038cc <_svfiprintf_r+0x1f0>)
 8003834:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003838:	2206      	movs	r2, #6
 800383a:	f7fc fcd1 	bl	80001e0 <memchr>
 800383e:	2800      	cmp	r0, #0
 8003840:	d038      	beq.n	80038b4 <_svfiprintf_r+0x1d8>
 8003842:	4b23      	ldr	r3, [pc, #140]	; (80038d0 <_svfiprintf_r+0x1f4>)
 8003844:	bb1b      	cbnz	r3, 800388e <_svfiprintf_r+0x1b2>
 8003846:	9b03      	ldr	r3, [sp, #12]
 8003848:	3307      	adds	r3, #7
 800384a:	f023 0307 	bic.w	r3, r3, #7
 800384e:	3308      	adds	r3, #8
 8003850:	9303      	str	r3, [sp, #12]
 8003852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003854:	4433      	add	r3, r6
 8003856:	9309      	str	r3, [sp, #36]	; 0x24
 8003858:	e767      	b.n	800372a <_svfiprintf_r+0x4e>
 800385a:	fb0c 3202 	mla	r2, ip, r2, r3
 800385e:	460c      	mov	r4, r1
 8003860:	2001      	movs	r0, #1
 8003862:	e7a5      	b.n	80037b0 <_svfiprintf_r+0xd4>
 8003864:	2300      	movs	r3, #0
 8003866:	3401      	adds	r4, #1
 8003868:	9305      	str	r3, [sp, #20]
 800386a:	4619      	mov	r1, r3
 800386c:	f04f 0c0a 	mov.w	ip, #10
 8003870:	4620      	mov	r0, r4
 8003872:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003876:	3a30      	subs	r2, #48	; 0x30
 8003878:	2a09      	cmp	r2, #9
 800387a:	d903      	bls.n	8003884 <_svfiprintf_r+0x1a8>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0c5      	beq.n	800380c <_svfiprintf_r+0x130>
 8003880:	9105      	str	r1, [sp, #20]
 8003882:	e7c3      	b.n	800380c <_svfiprintf_r+0x130>
 8003884:	fb0c 2101 	mla	r1, ip, r1, r2
 8003888:	4604      	mov	r4, r0
 800388a:	2301      	movs	r3, #1
 800388c:	e7f0      	b.n	8003870 <_svfiprintf_r+0x194>
 800388e:	ab03      	add	r3, sp, #12
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	462a      	mov	r2, r5
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <_svfiprintf_r+0x1f8>)
 8003896:	a904      	add	r1, sp, #16
 8003898:	4638      	mov	r0, r7
 800389a:	f3af 8000 	nop.w
 800389e:	1c42      	adds	r2, r0, #1
 80038a0:	4606      	mov	r6, r0
 80038a2:	d1d6      	bne.n	8003852 <_svfiprintf_r+0x176>
 80038a4:	89ab      	ldrh	r3, [r5, #12]
 80038a6:	065b      	lsls	r3, r3, #25
 80038a8:	f53f af2c 	bmi.w	8003704 <_svfiprintf_r+0x28>
 80038ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038ae:	b01d      	add	sp, #116	; 0x74
 80038b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038b4:	ab03      	add	r3, sp, #12
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	462a      	mov	r2, r5
 80038ba:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <_svfiprintf_r+0x1f8>)
 80038bc:	a904      	add	r1, sp, #16
 80038be:	4638      	mov	r0, r7
 80038c0:	f000 f87a 	bl	80039b8 <_printf_i>
 80038c4:	e7eb      	b.n	800389e <_svfiprintf_r+0x1c2>
 80038c6:	bf00      	nop
 80038c8:	08003f10 	.word	0x08003f10
 80038cc:	08003f1a 	.word	0x08003f1a
 80038d0:	00000000 	.word	0x00000000
 80038d4:	08003625 	.word	0x08003625
 80038d8:	08003f16 	.word	0x08003f16

080038dc <_printf_common>:
 80038dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e0:	4616      	mov	r6, r2
 80038e2:	4699      	mov	r9, r3
 80038e4:	688a      	ldr	r2, [r1, #8]
 80038e6:	690b      	ldr	r3, [r1, #16]
 80038e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038ec:	4293      	cmp	r3, r2
 80038ee:	bfb8      	it	lt
 80038f0:	4613      	movlt	r3, r2
 80038f2:	6033      	str	r3, [r6, #0]
 80038f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038f8:	4607      	mov	r7, r0
 80038fa:	460c      	mov	r4, r1
 80038fc:	b10a      	cbz	r2, 8003902 <_printf_common+0x26>
 80038fe:	3301      	adds	r3, #1
 8003900:	6033      	str	r3, [r6, #0]
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	0699      	lsls	r1, r3, #26
 8003906:	bf42      	ittt	mi
 8003908:	6833      	ldrmi	r3, [r6, #0]
 800390a:	3302      	addmi	r3, #2
 800390c:	6033      	strmi	r3, [r6, #0]
 800390e:	6825      	ldr	r5, [r4, #0]
 8003910:	f015 0506 	ands.w	r5, r5, #6
 8003914:	d106      	bne.n	8003924 <_printf_common+0x48>
 8003916:	f104 0a19 	add.w	sl, r4, #25
 800391a:	68e3      	ldr	r3, [r4, #12]
 800391c:	6832      	ldr	r2, [r6, #0]
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	42ab      	cmp	r3, r5
 8003922:	dc26      	bgt.n	8003972 <_printf_common+0x96>
 8003924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003928:	1e13      	subs	r3, r2, #0
 800392a:	6822      	ldr	r2, [r4, #0]
 800392c:	bf18      	it	ne
 800392e:	2301      	movne	r3, #1
 8003930:	0692      	lsls	r2, r2, #26
 8003932:	d42b      	bmi.n	800398c <_printf_common+0xb0>
 8003934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003938:	4649      	mov	r1, r9
 800393a:	4638      	mov	r0, r7
 800393c:	47c0      	blx	r8
 800393e:	3001      	adds	r0, #1
 8003940:	d01e      	beq.n	8003980 <_printf_common+0xa4>
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	68e5      	ldr	r5, [r4, #12]
 8003946:	6832      	ldr	r2, [r6, #0]
 8003948:	f003 0306 	and.w	r3, r3, #6
 800394c:	2b04      	cmp	r3, #4
 800394e:	bf08      	it	eq
 8003950:	1aad      	subeq	r5, r5, r2
 8003952:	68a3      	ldr	r3, [r4, #8]
 8003954:	6922      	ldr	r2, [r4, #16]
 8003956:	bf0c      	ite	eq
 8003958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800395c:	2500      	movne	r5, #0
 800395e:	4293      	cmp	r3, r2
 8003960:	bfc4      	itt	gt
 8003962:	1a9b      	subgt	r3, r3, r2
 8003964:	18ed      	addgt	r5, r5, r3
 8003966:	2600      	movs	r6, #0
 8003968:	341a      	adds	r4, #26
 800396a:	42b5      	cmp	r5, r6
 800396c:	d11a      	bne.n	80039a4 <_printf_common+0xc8>
 800396e:	2000      	movs	r0, #0
 8003970:	e008      	b.n	8003984 <_printf_common+0xa8>
 8003972:	2301      	movs	r3, #1
 8003974:	4652      	mov	r2, sl
 8003976:	4649      	mov	r1, r9
 8003978:	4638      	mov	r0, r7
 800397a:	47c0      	blx	r8
 800397c:	3001      	adds	r0, #1
 800397e:	d103      	bne.n	8003988 <_printf_common+0xac>
 8003980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003988:	3501      	adds	r5, #1
 800398a:	e7c6      	b.n	800391a <_printf_common+0x3e>
 800398c:	18e1      	adds	r1, r4, r3
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	2030      	movs	r0, #48	; 0x30
 8003992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003996:	4422      	add	r2, r4
 8003998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800399c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039a0:	3302      	adds	r3, #2
 80039a2:	e7c7      	b.n	8003934 <_printf_common+0x58>
 80039a4:	2301      	movs	r3, #1
 80039a6:	4622      	mov	r2, r4
 80039a8:	4649      	mov	r1, r9
 80039aa:	4638      	mov	r0, r7
 80039ac:	47c0      	blx	r8
 80039ae:	3001      	adds	r0, #1
 80039b0:	d0e6      	beq.n	8003980 <_printf_common+0xa4>
 80039b2:	3601      	adds	r6, #1
 80039b4:	e7d9      	b.n	800396a <_printf_common+0x8e>
	...

080039b8 <_printf_i>:
 80039b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039bc:	7e0f      	ldrb	r7, [r1, #24]
 80039be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039c0:	2f78      	cmp	r7, #120	; 0x78
 80039c2:	4691      	mov	r9, r2
 80039c4:	4680      	mov	r8, r0
 80039c6:	460c      	mov	r4, r1
 80039c8:	469a      	mov	sl, r3
 80039ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039ce:	d807      	bhi.n	80039e0 <_printf_i+0x28>
 80039d0:	2f62      	cmp	r7, #98	; 0x62
 80039d2:	d80a      	bhi.n	80039ea <_printf_i+0x32>
 80039d4:	2f00      	cmp	r7, #0
 80039d6:	f000 80d8 	beq.w	8003b8a <_printf_i+0x1d2>
 80039da:	2f58      	cmp	r7, #88	; 0x58
 80039dc:	f000 80a3 	beq.w	8003b26 <_printf_i+0x16e>
 80039e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039e8:	e03a      	b.n	8003a60 <_printf_i+0xa8>
 80039ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039ee:	2b15      	cmp	r3, #21
 80039f0:	d8f6      	bhi.n	80039e0 <_printf_i+0x28>
 80039f2:	a101      	add	r1, pc, #4	; (adr r1, 80039f8 <_printf_i+0x40>)
 80039f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039f8:	08003a51 	.word	0x08003a51
 80039fc:	08003a65 	.word	0x08003a65
 8003a00:	080039e1 	.word	0x080039e1
 8003a04:	080039e1 	.word	0x080039e1
 8003a08:	080039e1 	.word	0x080039e1
 8003a0c:	080039e1 	.word	0x080039e1
 8003a10:	08003a65 	.word	0x08003a65
 8003a14:	080039e1 	.word	0x080039e1
 8003a18:	080039e1 	.word	0x080039e1
 8003a1c:	080039e1 	.word	0x080039e1
 8003a20:	080039e1 	.word	0x080039e1
 8003a24:	08003b71 	.word	0x08003b71
 8003a28:	08003a95 	.word	0x08003a95
 8003a2c:	08003b53 	.word	0x08003b53
 8003a30:	080039e1 	.word	0x080039e1
 8003a34:	080039e1 	.word	0x080039e1
 8003a38:	08003b93 	.word	0x08003b93
 8003a3c:	080039e1 	.word	0x080039e1
 8003a40:	08003a95 	.word	0x08003a95
 8003a44:	080039e1 	.word	0x080039e1
 8003a48:	080039e1 	.word	0x080039e1
 8003a4c:	08003b5b 	.word	0x08003b5b
 8003a50:	682b      	ldr	r3, [r5, #0]
 8003a52:	1d1a      	adds	r2, r3, #4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	602a      	str	r2, [r5, #0]
 8003a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0a3      	b.n	8003bac <_printf_i+0x1f4>
 8003a64:	6820      	ldr	r0, [r4, #0]
 8003a66:	6829      	ldr	r1, [r5, #0]
 8003a68:	0606      	lsls	r6, r0, #24
 8003a6a:	f101 0304 	add.w	r3, r1, #4
 8003a6e:	d50a      	bpl.n	8003a86 <_printf_i+0xce>
 8003a70:	680e      	ldr	r6, [r1, #0]
 8003a72:	602b      	str	r3, [r5, #0]
 8003a74:	2e00      	cmp	r6, #0
 8003a76:	da03      	bge.n	8003a80 <_printf_i+0xc8>
 8003a78:	232d      	movs	r3, #45	; 0x2d
 8003a7a:	4276      	negs	r6, r6
 8003a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a80:	485e      	ldr	r0, [pc, #376]	; (8003bfc <_printf_i+0x244>)
 8003a82:	230a      	movs	r3, #10
 8003a84:	e019      	b.n	8003aba <_printf_i+0x102>
 8003a86:	680e      	ldr	r6, [r1, #0]
 8003a88:	602b      	str	r3, [r5, #0]
 8003a8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a8e:	bf18      	it	ne
 8003a90:	b236      	sxthne	r6, r6
 8003a92:	e7ef      	b.n	8003a74 <_printf_i+0xbc>
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	6820      	ldr	r0, [r4, #0]
 8003a98:	1d19      	adds	r1, r3, #4
 8003a9a:	6029      	str	r1, [r5, #0]
 8003a9c:	0601      	lsls	r1, r0, #24
 8003a9e:	d501      	bpl.n	8003aa4 <_printf_i+0xec>
 8003aa0:	681e      	ldr	r6, [r3, #0]
 8003aa2:	e002      	b.n	8003aaa <_printf_i+0xf2>
 8003aa4:	0646      	lsls	r6, r0, #25
 8003aa6:	d5fb      	bpl.n	8003aa0 <_printf_i+0xe8>
 8003aa8:	881e      	ldrh	r6, [r3, #0]
 8003aaa:	4854      	ldr	r0, [pc, #336]	; (8003bfc <_printf_i+0x244>)
 8003aac:	2f6f      	cmp	r7, #111	; 0x6f
 8003aae:	bf0c      	ite	eq
 8003ab0:	2308      	moveq	r3, #8
 8003ab2:	230a      	movne	r3, #10
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003aba:	6865      	ldr	r5, [r4, #4]
 8003abc:	60a5      	str	r5, [r4, #8]
 8003abe:	2d00      	cmp	r5, #0
 8003ac0:	bfa2      	ittt	ge
 8003ac2:	6821      	ldrge	r1, [r4, #0]
 8003ac4:	f021 0104 	bicge.w	r1, r1, #4
 8003ac8:	6021      	strge	r1, [r4, #0]
 8003aca:	b90e      	cbnz	r6, 8003ad0 <_printf_i+0x118>
 8003acc:	2d00      	cmp	r5, #0
 8003ace:	d04d      	beq.n	8003b6c <_printf_i+0x1b4>
 8003ad0:	4615      	mov	r5, r2
 8003ad2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ad6:	fb03 6711 	mls	r7, r3, r1, r6
 8003ada:	5dc7      	ldrb	r7, [r0, r7]
 8003adc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ae0:	4637      	mov	r7, r6
 8003ae2:	42bb      	cmp	r3, r7
 8003ae4:	460e      	mov	r6, r1
 8003ae6:	d9f4      	bls.n	8003ad2 <_printf_i+0x11a>
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d10b      	bne.n	8003b04 <_printf_i+0x14c>
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	07de      	lsls	r6, r3, #31
 8003af0:	d508      	bpl.n	8003b04 <_printf_i+0x14c>
 8003af2:	6923      	ldr	r3, [r4, #16]
 8003af4:	6861      	ldr	r1, [r4, #4]
 8003af6:	4299      	cmp	r1, r3
 8003af8:	bfde      	ittt	le
 8003afa:	2330      	movle	r3, #48	; 0x30
 8003afc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003b04:	1b52      	subs	r2, r2, r5
 8003b06:	6122      	str	r2, [r4, #16]
 8003b08:	f8cd a000 	str.w	sl, [sp]
 8003b0c:	464b      	mov	r3, r9
 8003b0e:	aa03      	add	r2, sp, #12
 8003b10:	4621      	mov	r1, r4
 8003b12:	4640      	mov	r0, r8
 8003b14:	f7ff fee2 	bl	80038dc <_printf_common>
 8003b18:	3001      	adds	r0, #1
 8003b1a:	d14c      	bne.n	8003bb6 <_printf_i+0x1fe>
 8003b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b20:	b004      	add	sp, #16
 8003b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b26:	4835      	ldr	r0, [pc, #212]	; (8003bfc <_printf_i+0x244>)
 8003b28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b2c:	6829      	ldr	r1, [r5, #0]
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b34:	6029      	str	r1, [r5, #0]
 8003b36:	061d      	lsls	r5, r3, #24
 8003b38:	d514      	bpl.n	8003b64 <_printf_i+0x1ac>
 8003b3a:	07df      	lsls	r7, r3, #31
 8003b3c:	bf44      	itt	mi
 8003b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8003b42:	6023      	strmi	r3, [r4, #0]
 8003b44:	b91e      	cbnz	r6, 8003b4e <_printf_i+0x196>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	f023 0320 	bic.w	r3, r3, #32
 8003b4c:	6023      	str	r3, [r4, #0]
 8003b4e:	2310      	movs	r3, #16
 8003b50:	e7b0      	b.n	8003ab4 <_printf_i+0xfc>
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	f043 0320 	orr.w	r3, r3, #32
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	2378      	movs	r3, #120	; 0x78
 8003b5c:	4828      	ldr	r0, [pc, #160]	; (8003c00 <_printf_i+0x248>)
 8003b5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b62:	e7e3      	b.n	8003b2c <_printf_i+0x174>
 8003b64:	0659      	lsls	r1, r3, #25
 8003b66:	bf48      	it	mi
 8003b68:	b2b6      	uxthmi	r6, r6
 8003b6a:	e7e6      	b.n	8003b3a <_printf_i+0x182>
 8003b6c:	4615      	mov	r5, r2
 8003b6e:	e7bb      	b.n	8003ae8 <_printf_i+0x130>
 8003b70:	682b      	ldr	r3, [r5, #0]
 8003b72:	6826      	ldr	r6, [r4, #0]
 8003b74:	6961      	ldr	r1, [r4, #20]
 8003b76:	1d18      	adds	r0, r3, #4
 8003b78:	6028      	str	r0, [r5, #0]
 8003b7a:	0635      	lsls	r5, r6, #24
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	d501      	bpl.n	8003b84 <_printf_i+0x1cc>
 8003b80:	6019      	str	r1, [r3, #0]
 8003b82:	e002      	b.n	8003b8a <_printf_i+0x1d2>
 8003b84:	0670      	lsls	r0, r6, #25
 8003b86:	d5fb      	bpl.n	8003b80 <_printf_i+0x1c8>
 8003b88:	8019      	strh	r1, [r3, #0]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6123      	str	r3, [r4, #16]
 8003b8e:	4615      	mov	r5, r2
 8003b90:	e7ba      	b.n	8003b08 <_printf_i+0x150>
 8003b92:	682b      	ldr	r3, [r5, #0]
 8003b94:	1d1a      	adds	r2, r3, #4
 8003b96:	602a      	str	r2, [r5, #0]
 8003b98:	681d      	ldr	r5, [r3, #0]
 8003b9a:	6862      	ldr	r2, [r4, #4]
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f7fc fb1e 	bl	80001e0 <memchr>
 8003ba4:	b108      	cbz	r0, 8003baa <_printf_i+0x1f2>
 8003ba6:	1b40      	subs	r0, r0, r5
 8003ba8:	6060      	str	r0, [r4, #4]
 8003baa:	6863      	ldr	r3, [r4, #4]
 8003bac:	6123      	str	r3, [r4, #16]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bb4:	e7a8      	b.n	8003b08 <_printf_i+0x150>
 8003bb6:	6923      	ldr	r3, [r4, #16]
 8003bb8:	462a      	mov	r2, r5
 8003bba:	4649      	mov	r1, r9
 8003bbc:	4640      	mov	r0, r8
 8003bbe:	47d0      	blx	sl
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d0ab      	beq.n	8003b1c <_printf_i+0x164>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	079b      	lsls	r3, r3, #30
 8003bc8:	d413      	bmi.n	8003bf2 <_printf_i+0x23a>
 8003bca:	68e0      	ldr	r0, [r4, #12]
 8003bcc:	9b03      	ldr	r3, [sp, #12]
 8003bce:	4298      	cmp	r0, r3
 8003bd0:	bfb8      	it	lt
 8003bd2:	4618      	movlt	r0, r3
 8003bd4:	e7a4      	b.n	8003b20 <_printf_i+0x168>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	4632      	mov	r2, r6
 8003bda:	4649      	mov	r1, r9
 8003bdc:	4640      	mov	r0, r8
 8003bde:	47d0      	blx	sl
 8003be0:	3001      	adds	r0, #1
 8003be2:	d09b      	beq.n	8003b1c <_printf_i+0x164>
 8003be4:	3501      	adds	r5, #1
 8003be6:	68e3      	ldr	r3, [r4, #12]
 8003be8:	9903      	ldr	r1, [sp, #12]
 8003bea:	1a5b      	subs	r3, r3, r1
 8003bec:	42ab      	cmp	r3, r5
 8003bee:	dcf2      	bgt.n	8003bd6 <_printf_i+0x21e>
 8003bf0:	e7eb      	b.n	8003bca <_printf_i+0x212>
 8003bf2:	2500      	movs	r5, #0
 8003bf4:	f104 0619 	add.w	r6, r4, #25
 8003bf8:	e7f5      	b.n	8003be6 <_printf_i+0x22e>
 8003bfa:	bf00      	nop
 8003bfc:	08003f21 	.word	0x08003f21
 8003c00:	08003f32 	.word	0x08003f32

08003c04 <memcpy>:
 8003c04:	440a      	add	r2, r1
 8003c06:	4291      	cmp	r1, r2
 8003c08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003c0c:	d100      	bne.n	8003c10 <memcpy+0xc>
 8003c0e:	4770      	bx	lr
 8003c10:	b510      	push	{r4, lr}
 8003c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c1a:	4291      	cmp	r1, r2
 8003c1c:	d1f9      	bne.n	8003c12 <memcpy+0xe>
 8003c1e:	bd10      	pop	{r4, pc}

08003c20 <memmove>:
 8003c20:	4288      	cmp	r0, r1
 8003c22:	b510      	push	{r4, lr}
 8003c24:	eb01 0402 	add.w	r4, r1, r2
 8003c28:	d902      	bls.n	8003c30 <memmove+0x10>
 8003c2a:	4284      	cmp	r4, r0
 8003c2c:	4623      	mov	r3, r4
 8003c2e:	d807      	bhi.n	8003c40 <memmove+0x20>
 8003c30:	1e43      	subs	r3, r0, #1
 8003c32:	42a1      	cmp	r1, r4
 8003c34:	d008      	beq.n	8003c48 <memmove+0x28>
 8003c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c3e:	e7f8      	b.n	8003c32 <memmove+0x12>
 8003c40:	4402      	add	r2, r0
 8003c42:	4601      	mov	r1, r0
 8003c44:	428a      	cmp	r2, r1
 8003c46:	d100      	bne.n	8003c4a <memmove+0x2a>
 8003c48:	bd10      	pop	{r4, pc}
 8003c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c52:	e7f7      	b.n	8003c44 <memmove+0x24>

08003c54 <_free_r>:
 8003c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c56:	2900      	cmp	r1, #0
 8003c58:	d044      	beq.n	8003ce4 <_free_r+0x90>
 8003c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c5e:	9001      	str	r0, [sp, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f1a1 0404 	sub.w	r4, r1, #4
 8003c66:	bfb8      	it	lt
 8003c68:	18e4      	addlt	r4, r4, r3
 8003c6a:	f000 f913 	bl	8003e94 <__malloc_lock>
 8003c6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ce8 <_free_r+0x94>)
 8003c70:	9801      	ldr	r0, [sp, #4]
 8003c72:	6813      	ldr	r3, [r2, #0]
 8003c74:	b933      	cbnz	r3, 8003c84 <_free_r+0x30>
 8003c76:	6063      	str	r3, [r4, #4]
 8003c78:	6014      	str	r4, [r2, #0]
 8003c7a:	b003      	add	sp, #12
 8003c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c80:	f000 b90e 	b.w	8003ea0 <__malloc_unlock>
 8003c84:	42a3      	cmp	r3, r4
 8003c86:	d908      	bls.n	8003c9a <_free_r+0x46>
 8003c88:	6825      	ldr	r5, [r4, #0]
 8003c8a:	1961      	adds	r1, r4, r5
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	bf01      	itttt	eq
 8003c90:	6819      	ldreq	r1, [r3, #0]
 8003c92:	685b      	ldreq	r3, [r3, #4]
 8003c94:	1949      	addeq	r1, r1, r5
 8003c96:	6021      	streq	r1, [r4, #0]
 8003c98:	e7ed      	b.n	8003c76 <_free_r+0x22>
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	b10b      	cbz	r3, 8003ca4 <_free_r+0x50>
 8003ca0:	42a3      	cmp	r3, r4
 8003ca2:	d9fa      	bls.n	8003c9a <_free_r+0x46>
 8003ca4:	6811      	ldr	r1, [r2, #0]
 8003ca6:	1855      	adds	r5, r2, r1
 8003ca8:	42a5      	cmp	r5, r4
 8003caa:	d10b      	bne.n	8003cc4 <_free_r+0x70>
 8003cac:	6824      	ldr	r4, [r4, #0]
 8003cae:	4421      	add	r1, r4
 8003cb0:	1854      	adds	r4, r2, r1
 8003cb2:	42a3      	cmp	r3, r4
 8003cb4:	6011      	str	r1, [r2, #0]
 8003cb6:	d1e0      	bne.n	8003c7a <_free_r+0x26>
 8003cb8:	681c      	ldr	r4, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	6053      	str	r3, [r2, #4]
 8003cbe:	4421      	add	r1, r4
 8003cc0:	6011      	str	r1, [r2, #0]
 8003cc2:	e7da      	b.n	8003c7a <_free_r+0x26>
 8003cc4:	d902      	bls.n	8003ccc <_free_r+0x78>
 8003cc6:	230c      	movs	r3, #12
 8003cc8:	6003      	str	r3, [r0, #0]
 8003cca:	e7d6      	b.n	8003c7a <_free_r+0x26>
 8003ccc:	6825      	ldr	r5, [r4, #0]
 8003cce:	1961      	adds	r1, r4, r5
 8003cd0:	428b      	cmp	r3, r1
 8003cd2:	bf04      	itt	eq
 8003cd4:	6819      	ldreq	r1, [r3, #0]
 8003cd6:	685b      	ldreq	r3, [r3, #4]
 8003cd8:	6063      	str	r3, [r4, #4]
 8003cda:	bf04      	itt	eq
 8003cdc:	1949      	addeq	r1, r1, r5
 8003cde:	6021      	streq	r1, [r4, #0]
 8003ce0:	6054      	str	r4, [r2, #4]
 8003ce2:	e7ca      	b.n	8003c7a <_free_r+0x26>
 8003ce4:	b003      	add	sp, #12
 8003ce6:	bd30      	pop	{r4, r5, pc}
 8003ce8:	20000158 	.word	0x20000158

08003cec <sbrk_aligned>:
 8003cec:	b570      	push	{r4, r5, r6, lr}
 8003cee:	4e0e      	ldr	r6, [pc, #56]	; (8003d28 <sbrk_aligned+0x3c>)
 8003cf0:	460c      	mov	r4, r1
 8003cf2:	6831      	ldr	r1, [r6, #0]
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	b911      	cbnz	r1, 8003cfe <sbrk_aligned+0x12>
 8003cf8:	f000 f8bc 	bl	8003e74 <_sbrk_r>
 8003cfc:	6030      	str	r0, [r6, #0]
 8003cfe:	4621      	mov	r1, r4
 8003d00:	4628      	mov	r0, r5
 8003d02:	f000 f8b7 	bl	8003e74 <_sbrk_r>
 8003d06:	1c43      	adds	r3, r0, #1
 8003d08:	d00a      	beq.n	8003d20 <sbrk_aligned+0x34>
 8003d0a:	1cc4      	adds	r4, r0, #3
 8003d0c:	f024 0403 	bic.w	r4, r4, #3
 8003d10:	42a0      	cmp	r0, r4
 8003d12:	d007      	beq.n	8003d24 <sbrk_aligned+0x38>
 8003d14:	1a21      	subs	r1, r4, r0
 8003d16:	4628      	mov	r0, r5
 8003d18:	f000 f8ac 	bl	8003e74 <_sbrk_r>
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d101      	bne.n	8003d24 <sbrk_aligned+0x38>
 8003d20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003d24:	4620      	mov	r0, r4
 8003d26:	bd70      	pop	{r4, r5, r6, pc}
 8003d28:	2000015c 	.word	0x2000015c

08003d2c <_malloc_r>:
 8003d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d30:	1ccd      	adds	r5, r1, #3
 8003d32:	f025 0503 	bic.w	r5, r5, #3
 8003d36:	3508      	adds	r5, #8
 8003d38:	2d0c      	cmp	r5, #12
 8003d3a:	bf38      	it	cc
 8003d3c:	250c      	movcc	r5, #12
 8003d3e:	2d00      	cmp	r5, #0
 8003d40:	4607      	mov	r7, r0
 8003d42:	db01      	blt.n	8003d48 <_malloc_r+0x1c>
 8003d44:	42a9      	cmp	r1, r5
 8003d46:	d905      	bls.n	8003d54 <_malloc_r+0x28>
 8003d48:	230c      	movs	r3, #12
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	2600      	movs	r6, #0
 8003d4e:	4630      	mov	r0, r6
 8003d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d54:	4e2e      	ldr	r6, [pc, #184]	; (8003e10 <_malloc_r+0xe4>)
 8003d56:	f000 f89d 	bl	8003e94 <__malloc_lock>
 8003d5a:	6833      	ldr	r3, [r6, #0]
 8003d5c:	461c      	mov	r4, r3
 8003d5e:	bb34      	cbnz	r4, 8003dae <_malloc_r+0x82>
 8003d60:	4629      	mov	r1, r5
 8003d62:	4638      	mov	r0, r7
 8003d64:	f7ff ffc2 	bl	8003cec <sbrk_aligned>
 8003d68:	1c43      	adds	r3, r0, #1
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	d14d      	bne.n	8003e0a <_malloc_r+0xde>
 8003d6e:	6834      	ldr	r4, [r6, #0]
 8003d70:	4626      	mov	r6, r4
 8003d72:	2e00      	cmp	r6, #0
 8003d74:	d140      	bne.n	8003df8 <_malloc_r+0xcc>
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	4631      	mov	r1, r6
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	eb04 0803 	add.w	r8, r4, r3
 8003d80:	f000 f878 	bl	8003e74 <_sbrk_r>
 8003d84:	4580      	cmp	r8, r0
 8003d86:	d13a      	bne.n	8003dfe <_malloc_r+0xd2>
 8003d88:	6821      	ldr	r1, [r4, #0]
 8003d8a:	3503      	adds	r5, #3
 8003d8c:	1a6d      	subs	r5, r5, r1
 8003d8e:	f025 0503 	bic.w	r5, r5, #3
 8003d92:	3508      	adds	r5, #8
 8003d94:	2d0c      	cmp	r5, #12
 8003d96:	bf38      	it	cc
 8003d98:	250c      	movcc	r5, #12
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	f7ff ffa5 	bl	8003cec <sbrk_aligned>
 8003da2:	3001      	adds	r0, #1
 8003da4:	d02b      	beq.n	8003dfe <_malloc_r+0xd2>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	442b      	add	r3, r5
 8003daa:	6023      	str	r3, [r4, #0]
 8003dac:	e00e      	b.n	8003dcc <_malloc_r+0xa0>
 8003dae:	6822      	ldr	r2, [r4, #0]
 8003db0:	1b52      	subs	r2, r2, r5
 8003db2:	d41e      	bmi.n	8003df2 <_malloc_r+0xc6>
 8003db4:	2a0b      	cmp	r2, #11
 8003db6:	d916      	bls.n	8003de6 <_malloc_r+0xba>
 8003db8:	1961      	adds	r1, r4, r5
 8003dba:	42a3      	cmp	r3, r4
 8003dbc:	6025      	str	r5, [r4, #0]
 8003dbe:	bf18      	it	ne
 8003dc0:	6059      	strne	r1, [r3, #4]
 8003dc2:	6863      	ldr	r3, [r4, #4]
 8003dc4:	bf08      	it	eq
 8003dc6:	6031      	streq	r1, [r6, #0]
 8003dc8:	5162      	str	r2, [r4, r5]
 8003dca:	604b      	str	r3, [r1, #4]
 8003dcc:	4638      	mov	r0, r7
 8003dce:	f104 060b 	add.w	r6, r4, #11
 8003dd2:	f000 f865 	bl	8003ea0 <__malloc_unlock>
 8003dd6:	f026 0607 	bic.w	r6, r6, #7
 8003dda:	1d23      	adds	r3, r4, #4
 8003ddc:	1af2      	subs	r2, r6, r3
 8003dde:	d0b6      	beq.n	8003d4e <_malloc_r+0x22>
 8003de0:	1b9b      	subs	r3, r3, r6
 8003de2:	50a3      	str	r3, [r4, r2]
 8003de4:	e7b3      	b.n	8003d4e <_malloc_r+0x22>
 8003de6:	6862      	ldr	r2, [r4, #4]
 8003de8:	42a3      	cmp	r3, r4
 8003dea:	bf0c      	ite	eq
 8003dec:	6032      	streq	r2, [r6, #0]
 8003dee:	605a      	strne	r2, [r3, #4]
 8003df0:	e7ec      	b.n	8003dcc <_malloc_r+0xa0>
 8003df2:	4623      	mov	r3, r4
 8003df4:	6864      	ldr	r4, [r4, #4]
 8003df6:	e7b2      	b.n	8003d5e <_malloc_r+0x32>
 8003df8:	4634      	mov	r4, r6
 8003dfa:	6876      	ldr	r6, [r6, #4]
 8003dfc:	e7b9      	b.n	8003d72 <_malloc_r+0x46>
 8003dfe:	230c      	movs	r3, #12
 8003e00:	603b      	str	r3, [r7, #0]
 8003e02:	4638      	mov	r0, r7
 8003e04:	f000 f84c 	bl	8003ea0 <__malloc_unlock>
 8003e08:	e7a1      	b.n	8003d4e <_malloc_r+0x22>
 8003e0a:	6025      	str	r5, [r4, #0]
 8003e0c:	e7de      	b.n	8003dcc <_malloc_r+0xa0>
 8003e0e:	bf00      	nop
 8003e10:	20000158 	.word	0x20000158

08003e14 <_realloc_r>:
 8003e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e18:	4680      	mov	r8, r0
 8003e1a:	4614      	mov	r4, r2
 8003e1c:	460e      	mov	r6, r1
 8003e1e:	b921      	cbnz	r1, 8003e2a <_realloc_r+0x16>
 8003e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e24:	4611      	mov	r1, r2
 8003e26:	f7ff bf81 	b.w	8003d2c <_malloc_r>
 8003e2a:	b92a      	cbnz	r2, 8003e38 <_realloc_r+0x24>
 8003e2c:	f7ff ff12 	bl	8003c54 <_free_r>
 8003e30:	4625      	mov	r5, r4
 8003e32:	4628      	mov	r0, r5
 8003e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e38:	f000 f838 	bl	8003eac <_malloc_usable_size_r>
 8003e3c:	4284      	cmp	r4, r0
 8003e3e:	4607      	mov	r7, r0
 8003e40:	d802      	bhi.n	8003e48 <_realloc_r+0x34>
 8003e42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e46:	d812      	bhi.n	8003e6e <_realloc_r+0x5a>
 8003e48:	4621      	mov	r1, r4
 8003e4a:	4640      	mov	r0, r8
 8003e4c:	f7ff ff6e 	bl	8003d2c <_malloc_r>
 8003e50:	4605      	mov	r5, r0
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d0ed      	beq.n	8003e32 <_realloc_r+0x1e>
 8003e56:	42bc      	cmp	r4, r7
 8003e58:	4622      	mov	r2, r4
 8003e5a:	4631      	mov	r1, r6
 8003e5c:	bf28      	it	cs
 8003e5e:	463a      	movcs	r2, r7
 8003e60:	f7ff fed0 	bl	8003c04 <memcpy>
 8003e64:	4631      	mov	r1, r6
 8003e66:	4640      	mov	r0, r8
 8003e68:	f7ff fef4 	bl	8003c54 <_free_r>
 8003e6c:	e7e1      	b.n	8003e32 <_realloc_r+0x1e>
 8003e6e:	4635      	mov	r5, r6
 8003e70:	e7df      	b.n	8003e32 <_realloc_r+0x1e>
	...

08003e74 <_sbrk_r>:
 8003e74:	b538      	push	{r3, r4, r5, lr}
 8003e76:	4d06      	ldr	r5, [pc, #24]	; (8003e90 <_sbrk_r+0x1c>)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	602b      	str	r3, [r5, #0]
 8003e80:	f7fd fa30 	bl	80012e4 <_sbrk>
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d102      	bne.n	8003e8e <_sbrk_r+0x1a>
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	b103      	cbz	r3, 8003e8e <_sbrk_r+0x1a>
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	bd38      	pop	{r3, r4, r5, pc}
 8003e90:	20000160 	.word	0x20000160

08003e94 <__malloc_lock>:
 8003e94:	4801      	ldr	r0, [pc, #4]	; (8003e9c <__malloc_lock+0x8>)
 8003e96:	f000 b811 	b.w	8003ebc <__retarget_lock_acquire_recursive>
 8003e9a:	bf00      	nop
 8003e9c:	20000164 	.word	0x20000164

08003ea0 <__malloc_unlock>:
 8003ea0:	4801      	ldr	r0, [pc, #4]	; (8003ea8 <__malloc_unlock+0x8>)
 8003ea2:	f000 b80c 	b.w	8003ebe <__retarget_lock_release_recursive>
 8003ea6:	bf00      	nop
 8003ea8:	20000164 	.word	0x20000164

08003eac <_malloc_usable_size_r>:
 8003eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eb0:	1f18      	subs	r0, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	bfbc      	itt	lt
 8003eb6:	580b      	ldrlt	r3, [r1, r0]
 8003eb8:	18c0      	addlt	r0, r0, r3
 8003eba:	4770      	bx	lr

08003ebc <__retarget_lock_acquire_recursive>:
 8003ebc:	4770      	bx	lr

08003ebe <__retarget_lock_release_recursive>:
 8003ebe:	4770      	bx	lr

08003ec0 <_init>:
 8003ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec2:	bf00      	nop
 8003ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec6:	bc08      	pop	{r3}
 8003ec8:	469e      	mov	lr, r3
 8003eca:	4770      	bx	lr

08003ecc <_fini>:
 8003ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ece:	bf00      	nop
 8003ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed2:	bc08      	pop	{r3}
 8003ed4:	469e      	mov	lr, r3
 8003ed6:	4770      	bx	lr
